sum(durationsOnt$Frequency - freq.mean)
durationsOnt$Freq.1000 = durationsOnt$Frequency * 10
sum(durationsOnt$Freq.1000 – mean(durationsOnt$Freq.1000))
durationsOnt$Freq.1000 = durationsOnt$Frequency * 10
sum(durationsOnt$Freq.1000 - mean(durationsOnt$Freq.1000))
durationsOnt$Freq.1000 = durationsOnt$Frequency + 1000
sum(durationsOnt$Freq.1000 - mean(durationsOnt$Freq.1000))
durationsOnt$Freq.1000 = durationsOnt$Frequency + 1000
mean(durationsOnt$Freq.1000 - mean(durationsOnt$Freq.1000))
mean(durationsOnt$Frequency - freq.mean)
cov(durationsOnt$Freq.1000, durationsOnt$DurationOfPrefix)
cov(durationsOnt$Frequency, durationsOnt$DurationOfPrefix)
cov(durationsOnt$Freq.10x, durationsOnt$DurationOfPrefix)
cov(durationsOnt$Frequency – freq.mean)
cov(durationsOnt$Frequency - freq.mean)
cov(durationsOnt$Frequency, durationsOnt$DurationOfPrefix)
cov(durationsOnt$Freq.10x, durationsOnt$DurationOfPrefix)
freq.z = scale(durationsOnt$Frequency)
dur.z = scale(durationsOnt$DurationOfPrefix)
# The sample size "n" is the same for paired variables
sum(freq.z * dur.z) / (length(freq.z) - 1)
cor.test(freq.z, dur.z)
cor.test(freq.z, dur.z)$estimate
cor.test(freq.z, dur.z)$estimate^2
r = -0.04927405
n = length(durationsOnt$Frequency)
# x^y = x to the power of y
t = r / (sqrt(1 - r^2) / sqrt(n - 2))
t
p = pt(t, df = n – 2)
p = pt(t, df = n - 2)
p
p * 2
cor.test(x = freq.z, y = dur.z)
library(ggplot2)
poly.df = data.frame(x = seq(-5, 5, length = 50))
poly.df$y = x^2
poly.df$y = poly.df$x^2
head(poly.df)
ggplot(data = poly.df, mapping = aes(x = x, y = y)) +
geom_line(stat = "identity", lwd = 1.5, color = "grey40", alpha = .4) +
labs(title = "Figure 5. Nonlinear x-y- correlation", caption = "Quadratic equation: y = x^2") +
theme_bw()
poly.df = data.frame(x = seq(-5, 5, length = 50))
poly.df$y = poly.df$x^2 - 5
ggplot(data = poly.df, mapping = aes(x = x, y = y)) +
geom_line(stat = "identity", lwd = 1.5, color = "grey40", alpha = .4) +
labs(title = "Figure 5. Nonlinear x-y- correlation", caption = "Quadratic equation: y = x^2 - 5") +
theme_bw()
ggplot(data = poly.df, mapping = aes(x = x, y = y)) +
geom_line(stat = "identity", lwd = 1.5, color = "grey40", alpha = .4) +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Figure 5. Nonlinear x-y- correlation", caption = "Quadratic equation: y = x^2 - 5") +
theme_bw()
ggplot(data = poly.df, mapping = aes(x = x, y = y)) +
geom_line(stat = "identity", lwd = 1.5, color = "grey40", alpha = .4) +
geom_hline(yintercept = 0, color = "red") +
geom_vline(xintercept = 0, color = "blue") +
labs(title = "Figure 5. Nonlinear x-y- correlation", caption = "Quadratic equation: y = x^2 - 5") +
theme_bw()
cor.test(poly.df$x, poly.df$y)
# Figure 6
poly.df = data.frame(x = seq(-5, 5, length = 50))
poly.df$y = poly.df$x^2 - 5
ggplot(data = poly.df, mapping = aes(x = x, y = y)) +
geom_line(stat = "identity", lwd = 1.5, color = "grey40", alpha = .4) +
geom_hline(yintercept = 0, color = "red") +
geom_vline(xintercept = 0, color = "blue") +
labs(title = "Figure 6. Nonlinear x-y- correlation", caption = "Quadratic equation: y = x^2 - 5") +
theme_bw()
ggplot(data = poly.df, mapping = aes(x = x, y = y)) +
geom_line(stat = "identity", lwd = 1.5, color = "grey40", alpha = .4) +
geom_hline(yintercept = 0, color = "red") +
geom_vline(xintercept = 0, color = "blue") +
labs(title = "Figure 6. Nonlinear x-y correlation", caption = "Quadratic equation: y = x^2 - 5") +
theme_bw()
set.seed(1)
cor.outliers = data.frame(x = rnorm(10), y = rnorm(10))
cor.outliers
cor.test(cor.outliers)
cor.test(cor.outliers$x, cor.outliers$y)
cor.outliers = rbind(cor.outliers, data.frame(x = 3, y = 3))
cor.outliers
cor.test(cor.outliers$x, cor.outliers$y)
set.seed(1)
cor.outliers = data.frame(x = rnorm(10), y = rnorm(10))
cor.outliers = rbind(cor.outliers, data.frame(x = c(2,3), y = c(2,3)))
cor.test(cor.outliers$x, cor.outliers$y)
set.seed(2)
cor.outliers = data.frame(x = rnorm(10), y = rnorm(10))
cor.outliers = rbind(cor.outliers, data.frame(x = c(2,3), y = c(2,3)))
cor.test(cor.outliers$x, cor.outliers$y)
head(cor.outliers)
set.seed(1)
cor.outliers = data.frame(x = rnorm(10, 0.5, 0.2), y = rnorm(10, 0.5, 0.2))
cor.outliers = rbind(cor.outliers, data.frame(x = 3, y = 3))
cor.outliers
cor.test(cor.outliers$x, cor.outliers$y)
set.seed(1)
cor.rand = data.frame(x = rnorm(10, 0.5, 0.2), y = rnorm(10, 0.5, 0.2))
cor.outliers = rbind(cor.rand, data.frame(x = 3, y = 3))
cor.test(cor.rand$x, cor.rand$y)
cor.test(cor.outliers$x, cor.outliers$y)
set.seed(1)
cor.rand = data.frame(x = rnorm(10, 0.5, 0.2), y = rnorm(10, 0.5, 0.2))
cor.outliers = rbind(cor.rand, data.frame(x = 3, y = 3))
ggplot(mapping = aes(x = x, y = y)) +
geom_point(data = cor.rand, color = "grey40", alpha = .4) +
geom_point(data = data.frame(x = 3, y = 3), color = "red", alpha = .4) +
labs(title = "Figure 5. An outlier in a correlation test",
caption = "Without the outlier: r = -0.38, p = .28\nWith the outlier: r = 0.93, p < .001") +
theme_bw()
ggplot(mapping = aes(x = x, y = y)) +
geom_point(data = cor.rand, size = 2, color = "grey40", alpha = .4) +
geom_point(data = data.frame(x = 3, y = 3), size = 2, color = "red", alpha = .4) +
labs(title = "Figure 5. An outlier in a correlation test",
caption = "Without the outlier: r = -0.38, p = .28\nWith the outlier: r = 0.93, p < .001") +
theme_bw()
homo.sced = data.frame(x = seq(-2, 2, length = 100), y = seq(-2, 2, length = -100))
homo.sced = data.frame(x = seq(-2, 2, length = 100), y = seq(-2, 2, length = 100))
?seq
seq(1, 100, by = 2)
home.sced[seq(1, 100, by = 2),]$y = home.sced[seq(1, 100, by = 2),]$y + home.sced[seq(1, 100, by = 2),]$y * 0.1
homo.sced = data.frame(x = seq(-2, 2, length = 100), y = seq(-2, 2, length = 100))
home.sced[seq(1, 100, by = 2),]$y = home.sced[seq(1, 100, by = 2),]$y + seq(1, 100, by = 2) * 0.1
home.sced = data.frame(x = seq(-2, 2, length = 100), y = seq(-2, 2, length = 100))
home.sced[seq(1, 100, by = 2),]$y = home.sced[seq(1, 100, by = 2),]$y + seq(1, 100, by = 2) * 0.1
head(home.sced)
ggplot(data = home.sced, mapping = aes(x = x, y = y)) +
geom_point(size = 2, color = "grey40", alpha = 0.4) +
labs(title = "Figure 7. Violation of homoscedasticity") +
theme_bw()
resourcesURL = "https://lngproc.fl.nthu.edu.tw/statisticsR/Week5-7/"
overgen = read.csv(paste(resourcesURL, "overgen.csv", sep = ""),
fileEncoding = "UTF-8-BOM")
overgen
head(overgen)
overgen$Error.diff = overgen$Error_2 – overgen$Error_3
head(overgen)
overgen$Error.diff = overgen$Error_2 - overgen$Error_3
head(overgen)
diff.mean = mean(overgen$Error.diff)
diff.sd = sd(overgen$Error.diff)
diff.mean
diff.sd
diff.se = sd / sqrt(nrow(overgen))
diff.se = diff.sd / sqrt(nrow(overgen))
diff.se
overgen.t = diff.mean / diff.se
overgen.t
overgen.p = pt(q = overgen.t, df = nrow(overgen) – 1)
overgen.p
overgen.p = pt(q = overgen.t, df = nrow(overgen) - 1)
overgen.p
overgen.p = pt(q = overgen.t, df = nrow(overgen) – 1, lower.tail = FALSE)
overgen.p
overgen.p = pt(q = overgen.t, df = nrow(overgen) - 1, lower.tail = FALSE)
overgen.p
t.test(overgen$Error_2, overgen$Error_3, paired = T)
overgen.p * 2
set.seed(1)
n = 30
mean = 0
se = 0
ci.upper = 0
ci.lower = 0
for(i in 1:50) {
sample = rnorm(n)
mean[i] = mean(sample)
se[i] = sd(sample) / sqrt(n)
ci.upper[i] = mean[i] + 1.96 * se[i]
ci.lower[i] = mean[i] - 1.96 * se[i]
}
head(mean)
ci.test = data.frame(sample.mean = mean, sample.se = se, ci.upper = ci.upper, ci.lower = ci.lower)
head(ci.test)
ci.test = data.frame(sample.mean = mean, sample.se = se, ci.upper = ci.upper, ci.lower = ci.lower, x = 1:50)
head(ci.test)
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_point(type = "n")
library(ggplot2)
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_point(type = "n")
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_point(shape = "n")
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_point(shape = NA)
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_point(shape = NA) + geom_errorbar(ymin = ci.lower, ymax = ci.upper)
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper)
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
scale_y_continuous(limits = c(-2,2))
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
scale_y_continuous(limits = c(-1.5, 1.5))
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
scale_y_continuous(limits = c(-1.5, 1.5)) +
scale_x_continuous(labels = NA) +
coord_flip() + labs(title = "95% CI of 50 Samples from Normal Distribution", x = "", y = "95% CI") +
theme_bw()
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
scale_y_continuous(limits = c(-1.5, 1.5)) +
coord_flip() + labs(title = "95% CI of 50 Samples from Normal Distribution", x = "", y = "95% CI") +
theme_bw()
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
scale_y_continuous(limits = c(-1.5, 1.5)) +
coord_flip() + labs(title = "95% CI of 50 Samples from Normal Distribution", x = "", y = "95% CI") +
theme(axis.ticks.x = element_blank()) +
theme_bw()
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
scale_y_continuous(limits = c(-1.5, 1.5)) +
coord_flip() + labs(title = "95% CI of 50 Samples from Normal Distribution", x = "", y = "95% CI") +
theme(axis.text.x = element_blank()) +
theme_bw()
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
scale_y_continuous(limits = c(-1.5, 1.5)) +
coord_flip() + labs(title = "95% CI of 50 Samples from Normal Distribution", x = "", y = "95% CI") +
theme(axis.text.y = element_blank()) +
theme_bw()
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
scale_y_continuous(limits = c(-1.5, 1.5)) +
coord_flip() + labs(title = "95% CI of 50 Samples from Normal Distribution", x = "", y = "95% CI") +
theme_bw(axis.text.x = element_blank())
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
scale_y_continuous(limits = c(-1.5, 1.5)) +
coord_flip() + labs(title = "95% CI of 50 Samples from Normal Distribution", x = "", y = "95% CI") +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
theme_bw()
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
scale_y_continuous(limits = c(-1.5, 1.5)) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
coord_flip() + labs(title = "95% CI of 50 Samples from Normal Distribution", x = "", y = "95% CI") +
theme_bw()
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
scale_y_continuous(limits = c(-1.5, 1.5)) +
coord_flip() + labs(title = "95% CI of 50 Samples from Normal Distribution", x = "", y = "95% CI") +
theme_bw()
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
scale_x_continuous(labels = NULL, breaks = NULL) +
scale_y_continuous(limits = c(-1.5, 1.5)) +
coord_flip() + labs(title = "95% CI of 50 Samples from Normal Distribution", x = "", y = "95% CI") +
theme_bw()
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
geom_hline(yintercept = mean(sample.mean)) +
scale_x_continuous(labels = NULL, breaks = NULL) +
scale_y_continuous(limits = c(-1.5, 1.5)) +
coord_flip() + labs(title = "95% CI of 50 Samples from Normal Distribution", x = "", y = "95% CI") +
theme_bw()
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
geom_hline(yintercept = mean(ci.test$sample.mean)) +
scale_x_continuous(labels = NULL, breaks = NULL) +
scale_y_continuous(limits = c(-1.5, 1.5)) +
coord_flip() + labs(title = "95% CI of 50 Samples from Normal Distribution", x = "", y = "95% CI") +
theme_bw()
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
geom_hline(yintercept = mean(ci.test$sample.mean), lwd = 1.5, color = "red") +
scale_x_continuous(labels = NULL, breaks = NULL) +
scale_y_continuous(limits = c(-1.5, 1.5)) +
coord_flip() + labs(title = "95% CI of 50 Samples from Normal Distribution", x = "", y = "95% CI") +
theme_bw()
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
geom_hline(yintercept = mean(ci.test$sample.mean), color = "red") +
scale_x_continuous(labels = NULL, breaks = NULL) +
scale_y_continuous(limits = c(-1.5, 1.5)) +
coord_flip() + labs(title = "95% CI of 50 Samples from Normal Distribution",
subtitle = "mu = 0, sd = 1", x = "", y = "95% CI", caption = "red line = M") +
theme_bw()
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
geom_hline(yintercept = mean(ci.test$sample.mean), color = "red") +
scale_x_continuous(labels = NULL, breaks = NULL) +
scale_y_continuous(limits = c(-1.5, 1.5)) +
coord_flip() + labs(title = "Figure 9. 95% CI of 50 Samples from Normal Distribution",
subtitle = "mu = 0, sd = 1", x = "", y = "95% CI", caption = "red line = M") +
theme_bw()
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
geom_hline(yintercept = mean(ci.test$sample.mean), color = "red") +
scale_x_continuous(labels = NULL, breaks = NULL) +
scale_y_continuous(limits = c(-1, 1)) +
coord_flip() + labs(title = "Figure 9. 95% CI of 50 Samples from Normal Distribution",
subtitle = "mu = 0, sd = 1", x = "", y = "95% CI", caption = "red line = M") +
theme_bw()
set.seed(1)
n = 30
means = 0
se = 0
ci.upper = 0
ci.lower = 0
for(i in 1:50) {
sample = rnorm(n)
means[i] = mean(sample)
se[i] = sd(sample) / sqrt(n)
ci.upper[i] = mean[i] + 1.96 * se[i]
ci.lower[i] = mean[i] - 1.96 * se[i]
}
ci.test = data.frame(sample.mean = means, sample.se = se,
ci.upper = ci.upper, ci.lower = ci.lower, x = 1:50)
means.avg = mean(means)
ci.test$includeMu = ifelse(ci.test$ci.lower > means.avg | ci.test$ci.upper < means.avg, "No", "Yes")
head(ci.test)
tail(ci.test)
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean, color = includeMu)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
geom_hline(yintercept = mean(ci.test$sample.mean), color = "red") +
scale_x_continuous(labels = NULL, breaks = NULL) +
scale_y_continuous(limits = c(-1, 1)) +
scale_color_brewer(palette = "3-class Greys") +
coord_flip() + labs(title = "Figure 9. 95% CI of 50 Samples from Normal Distribution",
subtitle = "mu = 0, sd = 1", x = "", y = "95% CI", caption = "red line = M") +
guides(color = guide_legend(title = "Include Mu")) +
theme_bw()
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean, color = includeMu)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
geom_hline(yintercept = mean(ci.test$sample.mean), color = "red") +
scale_x_continuous(labels = NULL, breaks = NULL) +
scale_y_continuous(limits = c(-1, 1)) +
scale_color_brewer(palette = "Greys") +
coord_flip() + labs(title = "Figure 9. 95% CI of 50 Samples from Normal Distribution",
subtitle = "mu = 0, sd = 1", x = "", y = "95% CI", caption = "red line = M") +
guides(color = guide_legend(title = "Include Mu")) +
theme_bw()
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean, color = includeMu)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
geom_hline(yintercept = mean(ci.test$sample.mean), color = "red") +
scale_x_continuous(labels = NULL, breaks = NULL) +
scale_y_continuous(limits = c(-1, 1)) +
scale_color_brewer(palette = "PuBuGn") +
coord_flip() + labs(title = "Figure 9. 95% CI of 50 Samples from Normal Distribution",
subtitle = "mu = 0, sd = 1", x = "", y = "95% CI", caption = "red line = M") +
guides(color = guide_legend(title = "Include Mu")) +
theme_bw()
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean, color = includeMu)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
geom_hline(yintercept = mean(ci.test$sample.mean), color = "red") +
scale_x_continuous(labels = NULL, breaks = NULL) +
scale_y_continuous(limits = c(-1, 1)) +
scale_color_brewer(palette = "Oranges") +
coord_flip() + labs(title = "Figure 9. 95% CI of 50 Samples from Normal Distribution",
subtitle = "mu = 0, sd = 1", x = "", y = "95% CI", caption = "red line = M") +
guides(color = guide_legend(title = "Include Mu")) +
theme_bw()
ggplot(data = ci.test, mapping = aes(x = x, y = sample.mean, color = includeMu)) +
geom_errorbar(ymin = ci.lower, ymax = ci.upper) +
geom_hline(yintercept = mean(ci.test$sample.mean), color = "red") +
scale_x_continuous(labels = NULL, breaks = NULL) +
scale_y_continuous(limits = c(-1, 1)) +
scale_color_manual(values = c("#252525", "#cccccc")) +
coord_flip() + labs(title = "Figure 9. 95% CI of 50 Samples from Normal Distribution",
subtitle = "mu = 0, sd = 1", x = "", y = "95% CI", caption = "red line = M") +
guides(color = guide_legend(title = "Include mu")) +
theme_bw()
library(lsd)
library(lsr)
install.packages("lsr", ask = F, dependencies = Y)
install.packages("lsr", ask = F, dependencies = T)
library(lsr)
# The sample mean is higher than the population mean, so we will obtain a
# t-value in the upper tail.
t.upper = (325 - 300) / (40 / sqrt(10))
# pt() acts like pnorm(), except that you need to input the df info.
p.upper = pt(q = t.upper, df = 10 - 1, lower.tail = FALSE)
p.upper * 2	# Two-tailed p-value
[1] 0.07951604
abs(325.8 - 300) / 38.09
set.seed(9)
group1.redo = rnorm(n = 40, mean = 325, sd = 40)
mean(group1.redo)
sd(group1.redo)
one.sample = t.test(x = group1.redo, mu = 300)
cohensD(one.sample)
?cohensD
cohensD(x = group1.redo, mu = 300)
(325.8303 - 300) / 38.08742
resourcesURL = "https://lngproc.fl.nthu.edu.tw/statisticsR/Week5-7/"
# The "clean" data set
Myers.clean = read.csv(paste(resourcesURL, "MyersClean.csv", sep = ""),
fileEncoding = "UTF-8-BOM")
sd(logRT)
sd(Myers.clean$logRT)
abs(6.98 - 7.04) / 0.6
exp(0.1)
3.67/7.59
s1.rt = Myers.clean[Myers.clean$Session == 1,]$logRT
s2.rt = Myers.clean[Myers.clean$Session == 2,]$logRT
cohensD(x = s1.rt, y = s2.rt, method = "unequal")
overgen = read.csv(paste(resourcesURL, "overgen.csv", sep = ""),
fileEncoding = "UTF-8-BOM")
cohensD(x = overgen$Error_2, y = overgen$Error_3, method = "paired")
library(languageR)
head(verbs)
?verbs
levels(as.factor(verbs$Verb))
subset(verbs, Verb == "guarantee")
subset(verbs, Verb == "serve")
subset(verbs, Verb == "charge")
printSumMean = function(x) {
sum(x)
mean(x)
}
printSumMean(verbs$LengthOfTheme)
printSumMean = function(x, y) {
diff = sum(x) - sum(y)
diff
}
printSumMean(verbs[verbs$Verb == "give",]$LengthOfTheme, verbs[verbs$Verb == "charge",]$LengthOfTheme)
printDiffMean = function(x, y) {
diff = mean(x) - mean(y)
diff
}
printDiffMean(verbs[verbs$Verb == "give",]$LengthOfTheme, verbs[verbs$Verb == "charge",]$LengthOfTheme)
gapCorp = read.csv("https://lngproc.fl.nthu.edu.tw/statisticsR/Week9/accidentalGapCorpus.csv", fileEncoding = "UTF-8-BOM")
gapCorp = read.csv("https://lngproc.fl.nthu.edu.tw/statisticsR/Week9/accidentalGapCorpus.csv", fileEncoding = "UTF-8")
gapCorp = read.csv("https://lngproc.fl.nthu.edu.tw/statisticsR/Week9/accidentalGapCorpus.csv", fileEncoding = "UTF-8-BOM")
gapCorp = read.table("https://lngproc.fl.nthu.edu.tw/statisticsR/Week9/accidentalGapCorpus.csv", header = T, sep = ",", fileEncoding = "UTF-8-BOM")
gapCorp = read.csv("https://lngproc.fl.nthu.edu.tw/statisticsR/Week9/accidentalGapCorpus.csv", fileEncoding = "UTF-8-BOM")
gapCorp = read.csv("https://lngproc.fl.nthu.edu.tw/statisticsR/Week9/accidentalGapCorpus.csv", fileEncoding = "UTF-8-BOM")
head(gapCorp)
gapCorp.simp = gapGaps[c("Pinyin_T", "tone", "onset.type", "gap_broad")]
# And we only care about accidental gaps
gapCorp.gap = subset(gapCorp.simp, gap_broad == "Y")
nrow(gapCorp.gap)	#
gapCorp = read.csv(paste(resourcesURL, "accidentalGapCorpus.csv", sep = ""),
fileEnconding = "UTF-8-BOM")
# We only need these four columns in the following analysis
gapCorp.simp = gapCorp[c("Pinyin_T", "tone", "onset.type", "gap_broad")]
# And we only care about accidental gaps
gapCorp.gap = subset(gapCorp.simp, gap_broad == "Y")
nrow(gapCorp.gap)	#
gapCorp = read.csv(paste("https://lngproc.fl.nthu.edu.tw/statisticsR/Week9/", "accidentalGapCorpus.csv", sep = ""),
fileEnconding = "UTF-8-BOM")
head(gapCorp)
gapCorp = read.csv(paste("https://lngproc.fl.nthu.edu.tw/statisticsR/Week9/", "accidentalGapCorpus.csv", sep = ""),
fileEnconding = "UTF-8-BOM")
resourcesURL = "https://lngproc.fl.nthu.edu.tw/statisticsR/Week9/"
gapCorp = read.csv(paste("https://lngproc.fl.nthu.edu.tw/statisticsR/Week9/", "accidentalGapCorpus.csv", sep = ""),
fileEnconding = "UTF-8-BOM")
setwd("D:/OneDrive/Documents/Academic Works/NTHU/Courses/Language and Statistics in R/GitHub/Statistics_in_R/Week9")
gapCorp = read.csv("accidentalGapCorpus.csv",
fileEnconding = "UTF-8-BOM")
gapCorp = read.csv("accidentalGapCorpus.csv",
fileEncoding = "UTF-8-BOM")
gapCorp = read.csv(paste(resourcesURL, "accidentalGapCorpus.csv", sep = ""),
fileEncoding = "UTF-8-BOM")
gapCorp.simp = gapCorp[c("Pinyin_T", "tone", "onset.type", "gap_broad")]
# And we only care about accidental gaps
gapCorp.gap = subset(gapCorp.simp, gap_broad == "Y")
nrow(gapCorp.gap)	# 288
head(gapCorp.gap)
gapCorp.xtab = xtabs(gap_broad ~ tone + onset.type, data = gapCorp.gap)
gapCorp.xtab
gapCorp.xtab = xtabs(~ gap_broad + tone + onset.type, data = gapCorp.gap)
gapCorp.xtab
# We only need these four columns in the following analysis
gapCorp.simp = gapCorp[c("Pinyin_T", "tone", "onset.type", "gap_broad")]
# And we only care about accidental gaps with an onset
gapCorp.gap =
subset(gapCorp.simp, gap_broad == "Y" & onset.type != "onsetless")
nrow(gapCorp.gap)	# 288
?table
gapCorp.table = table(gap_broad ~ tone + onset.type, data = gapCorp.gap)
gapCorp.voiless = subset(gapCorp.gap, onset.type == "voiceless")
gapCorp.voiced = subset(gapCorp.gap, onset.type == "voiced")
# Get the distribution of gaps by tonal category for each subset
voiless.gaps = table(gapCorp.voiless$tone)
voiced.gaps = table(gapCorp.voiced$tone)
voiless.gaps
voiced.gaps
chisq.test(voiless.gaps, voiced.gaps)
gaps.test = matrix(c(17, 113, 40, 25, 45, 16, 16, 7), ncol = 2)
gaps.test
gaps.test = matrix(c(17, 113, 40, 25, 45, 16, 16, 7), nrow = 2)
gaps.test
gaps.test = matrix(c(17, 113, 40, 25, 45, 16, 16, 7), ncol = 4)
gaps.test
voiless.gaps
voiced.gaps
gapCorp.xtab = xtabs(~ gap_broad + tone + onset.type, data = gapCorp.gap)
gapCorp.xtab
gapCorp.xtab = xtabs(~ tone + onset.type, data = gapCorp.gap)
gapCorp.xtab
gapCorp.xtab = xtabs(~ onset.type + tone, data = gapCorp.gap)
gapCorp.xtab
chisq.test(gapCorp.xtab)
chisq.test(gapCorp.xtab)
62 x 84 / 279
62 * 84 / 279
56 * 195 / 279
test.res = chisq.test(gapCorp.xtab)
test.res$expected
round(test.res$expected, 1)
4*4 + 3*4 + 3*3 + 2*3 + 2*2 + 1*2 + 1
4*4 + 3*4*2 + 3*3*2 + 2*3*2 + 2*2*2 + 1*2*2 + 1
4*4 + 3*4*2 + 3*3 + 2*3*2 + 2*2 + 1*2*2 + 1
1/70
1/70 * 2

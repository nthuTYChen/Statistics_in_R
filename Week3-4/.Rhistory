cohensD(one.sample)
?cohensD
cohensD(x = group1.redo, mu = 300)
(325.8303 - 300) / 38.08742
resourcesURL = "https://lngproc.fl.nthu.edu.tw/statisticsR/Week5-7/"
# The "clean" data set
Myers.clean = read.csv(paste(resourcesURL, "MyersClean.csv", sep = ""),
fileEncoding = "UTF-8-BOM")
sd(logRT)
sd(Myers.clean$logRT)
abs(6.98 - 7.04) / 0.6
exp(0.1)
3.67/7.59
s1.rt = Myers.clean[Myers.clean$Session == 1,]$logRT
s2.rt = Myers.clean[Myers.clean$Session == 2,]$logRT
cohensD(x = s1.rt, y = s2.rt, method = "unequal")
overgen = read.csv(paste(resourcesURL, "overgen.csv", sep = ""),
fileEncoding = "UTF-8-BOM")
cohensD(x = overgen$Error_2, y = overgen$Error_3, method = "paired")
library(languageR)
head(verbs)
?verbs
levels(as.factor(verbs$Verb))
subset(verbs, Verb == "guarantee")
subset(verbs, Verb == "serve")
subset(verbs, Verb == "charge")
printSumMean = function(x) {
sum(x)
mean(x)
}
printSumMean(verbs$LengthOfTheme)
printSumMean = function(x, y) {
diff = sum(x) - sum(y)
diff
}
printSumMean(verbs[verbs$Verb == "give",]$LengthOfTheme, verbs[verbs$Verb == "charge",]$LengthOfTheme)
printDiffMean = function(x, y) {
diff = mean(x) - mean(y)
diff
}
printDiffMean(verbs[verbs$Verb == "give",]$LengthOfTheme, verbs[verbs$Verb == "charge",]$LengthOfTheme)
gapCorp = read.csv("https://lngproc.fl.nthu.edu.tw/statisticsR/Week9/accidentalGapCorpus.csv", fileEncoding = "UTF-8-BOM")
gapCorp = read.csv("https://lngproc.fl.nthu.edu.tw/statisticsR/Week9/accidentalGapCorpus.csv", fileEncoding = "UTF-8")
gapCorp = read.csv("https://lngproc.fl.nthu.edu.tw/statisticsR/Week9/accidentalGapCorpus.csv", fileEncoding = "UTF-8-BOM")
gapCorp = read.table("https://lngproc.fl.nthu.edu.tw/statisticsR/Week9/accidentalGapCorpus.csv", header = T, sep = ",", fileEncoding = "UTF-8-BOM")
gapCorp = read.csv("https://lngproc.fl.nthu.edu.tw/statisticsR/Week9/accidentalGapCorpus.csv", fileEncoding = "UTF-8-BOM")
gapCorp = read.csv("https://lngproc.fl.nthu.edu.tw/statisticsR/Week9/accidentalGapCorpus.csv", fileEncoding = "UTF-8-BOM")
head(gapCorp)
gapCorp.simp = gapGaps[c("Pinyin_T", "tone", "onset.type", "gap_broad")]
# And we only care about accidental gaps
gapCorp.gap = subset(gapCorp.simp, gap_broad == "Y")
nrow(gapCorp.gap)	#
gapCorp = read.csv(paste(resourcesURL, "accidentalGapCorpus.csv", sep = ""),
fileEnconding = "UTF-8-BOM")
# We only need these four columns in the following analysis
gapCorp.simp = gapCorp[c("Pinyin_T", "tone", "onset.type", "gap_broad")]
# And we only care about accidental gaps
gapCorp.gap = subset(gapCorp.simp, gap_broad == "Y")
nrow(gapCorp.gap)	#
source("https://lngproc.fl.nthu.edu.tw/statisticsR/courseUtil.R")
sl.sim = loadCourseCSV(week = "Week10-11", file = "SaitoLysterSim.csv")
sl.sim.sub = subset(sl.sim, Group != "FFI+CF")
summary(aov(formula = rF3 ~ Group, data = sl.sim.sub)
)
t.test(formula = rF3 ~ Group, data = sl.sim.sub, var = TRUE)
1.3268^2
.95^5
.99^5
TukeyHSD(sl.sim.aov)
sl.sim.aov = aov(formula = rF3 ~ Group, data = sl.sim)
TukeyHSD(sl.sim.aov)
TukeyHSD(sl.sim.aov)$p.adj
TukeyHSD(sl.sim.aov)$padj
TukeyHSD(sl.sim.aov)$p
TukeyHSD(sl.sim.aov)$Group
TukeyHSD(sl.sim.aov)$Group[p.adj]
TukeyHSD(sl.sim.aov)$Group[4]
TukeyHSD(sl.sim.aov)$Group[11]
library(languageR)
head(verbs)
#Task I
head(verbs$LengthOfTheme)
#Task II
nrow(verbs)
#Task III
verbs[11:20 , ]
#Task IV
verbs.give = verbs[verbs$Verb == "give", ]
verbs.give
#Task V
verbs.charge = verbs[verbs$Verb == "charge", ]
verbs.charge
#Task VI
mean(verbs.give$LengthOfTheme)
mean(verbs.charge$LengthOfTheme)
#Themes used by the two verbs are longer than one word but shorter than two.
#However, the themes used by "give" are slightly longer in length than themes used by "charge."
#Part II
diffMeans = function(x, y){
x = mean(x)
y = mean(y)
z = x-y
return(z)
}
diffMeans(x = verbs.give$LengthOfTheme, y = verbs.charge$LengthOfTheme )
# Make sure the package is loaded
library(languageR)
########## Part I ##########
# Task I: the first six values of LengthOfTheme
# I used head() to get the data sets
#   that would be used in this task,
#   stored them in a variable,
#   than got the value of column LengthOfTheme
material <- head(verbs)
material[5]
# Task II:the number of rows in verbs
nrow(verbs)
# Task III: The first columns and
#   the 11th to the 20th rows of verbs
df <- verbs
df[11:20,1]
# Task IV
verbs.give <- df[verbs$Verb=='give',]
# Task V
verbs.charge <- df[verbs$Verb=='charge',]
# Task VI
LThemeOfGive <- verbs.give[5]
LThemeOfCharge <- verbs.charge[5]
mean(LThemeOfGive$LengthOfTheme)
mean(LThemeOfCharge$LengthOfTheme)
# The first two lines use the variable LThemeOfGive and LThemeOfCharge
#   to store LengthOfTheme of verbs.give and verbs.charge respectively.
# LThemeOfGive$LengthOfTheme turns the data into vector so mean() will work.
# The resulted average of LengthOfTheme for verb.give is 1.666104.
# The resulted average of LengthOfTheme for verb.charge is 1.329661.
# This means that while in average the two verbs "give" and "charge"
#   both have a theme longer than one word,
#   "give" tends to have a longer theme than "charge".
########## Part II ##########
diffMeans = function(x, y) {
return(mean(x)-mean(y))
}
# Test the function
diffMeans(LThemeOfGive$LengthOfTheme,LThemeOfCharge$LengthOfTheme)
# correctly shows the difference
# Part I ####
library(languageR)
head(verbs)
# Task I
head(verbs)[5]
# Task II
nrow(verbs) # 903
# Task III
verbs[11:20, 1]
# Task IV
verbs.give = verbs[verbs$Verb == "give", ]
# Task V
verbs.charge = verbs[verbs$Verb == "charge", ]
# Task VI
mean(verbs.give$LengthOfTheme) # 1.67
mean(verbs.charge$LengthOfTheme) # 1.33
# The mean values of the length of theme are different, with "verbs.give"
# being longer than "verbs.charge" by around 0.34 words, but this difference
# may not be statistically meaningful.
# The sample size of "verbs.charge" is not large enough and is much smaller
# compared to that of "verbs.give". With just three observations, we can hardly
# say that the data from "verbs.charge" can represent all possible sentences
# with dative structure that has the verb "charge".
# Part II ####
diffMeans = function(x, y){
mean.x = sum(x) / length(x)  # mean of x
mean.y = sum(y) / length(y)  # mean of y
dif = mean.x - mean.y        # difference
return(dif)
}
a = diffMeans(verbs.give$LengthOfTheme, verbs.charge$LengthOfTheme)
b = mean(verbs.give$LengthOfTheme) - mean(verbs.charge$LengthOfTheme)
a - b # == O
diffMeans(verbs.give$LengthOfTheme, verbs.charge$LengthOfTheme)
library(languageR)
head(verbs)
#Part1
#task1
head(verbs$LengthOfTheme)
#task2
nrow(verbs)
#task3
df[11:20,1]
df=verbs
#task4
verbs.give=subset(verbs,Verb == "give")
#task5
verbs.charge=subset(verbs,Verb == "charge")
#task6
verbs.give
mean(verbs.give$LengthOfTheme)
#1.666104
verbs.charge
mean(verbs.charge$LengthOfTheme)
#1.329661
#Though charge have many meanings, it is mostly used as meaning "collecting fees" when being dative. In this situation, we will say "charge for delivery or admission".
#We will give someone "an object", which mostly include the article and the noun, so it seems longer than the theme of charge.
#Part2
1.666104-1.329661
# Part I
library(languageR)
# Task I
head(verbs["LengthOfTheme"])
# Task II
nrow(verbs)
# Task III
verbs[11:20, 1]
# Task IV
verbs[verbs$Verb == "give", ]
verbs.give = verbs[verbs$Verb == "give", ]
# Task V
verbs[verbs$Verb == "charge", ]
verbs.charge = verbs[verbs$Verb == "charge", ]
# Task VI
mean(verbs.give$LengthOfTheme)
mean(verbs.charge$LengthOfTheme)
# The themes used with the verb "give" are longer than the themes used with the verb "charge."
# Part II
diffMeans = function(x, y) {
x = mean(x)
y = mean(y)
z = x - y
return(z)
}
res = diffMeans(x = verbs.give$LengthOfTheme,
y = verbs.charge$LengthOfTheme)
res
#Load a package using the function library()
library(languageR)
#Show the first six rows of the "verbs" data set
head(verbs)
#part I
#Task I
head(verbs$LengthOfTheme)
#Task II
nrow(verbs)
#Task III
verbs[11:20, 1]
#Task IV
verbs.give=verbs[verbs$Verb=="give", ]
#Task V
verbs.charge=verbs[verbs$Verb=="charge", ]
#Task VI
install.packages("data.table")
library(data.table)
#the average of verbs.give
verbs.give=data.table(verbs.give)
verbs.give[ ,mean(LengthOfTheme, trim=0, na.rm=FALSE)]
#the average of verbs.charge
verbs.charge=data.table(verbs.charge)
verbs.charge[ ,mean(LengthOfTheme, trim=0, na.rm=FALSE)]
#Is there an difference between the themes that can be used with the two
#verbs ?
#Based on the means of two verbs, verbs.give is 1.666104 while
#verbs.charge is 1.329661, it seems that there are no differences between
#the themes that can be used in both verbs.
#part II
diffMeans()
diffMeans=function(x,y){
x=data.table(x)
x=x[ ,mean(LengthOfTheme, trim=0 ,na.rm=FALSE)]
y=data.table(y)
y=y[ ,mean(LengthOfTheme, trim=0, na.rm=FALSE)]
z=x-y
return(z)
}
remove.packages("data.table")
#Part I
# 1.List the first six value of LengthOfTheme
head(verbs["LengthOfTheme"])
# 2.Show how many rows there are in df. verbs
nrow(verbs)
#3.show data in 11 to 20 rows and 1 column
verbs[11:20,1]
#4. create a new variable, use True/False to select rows with "give"
verbs.give = verbs[verbs$Verb == "give", ]
#5. same as task4, select rows with "charge"
verbs.charge = verbs[verbs$Verb == "charge", ]
#6
mean(verbs.give$LengthOfTheme) #get the average Length Of Theme 1.666104
mean(verbs.charge$LengthOfTheme) #get the average Length Of Theme1.329661
# According to the result, we can see that the mean of length of theme of "give"
# is greater than "charge", maybe we can assume
# that the verb "charge" is more restricted to certain specific words
# such as money, fee, etc.
# while "give" is used with a wide variety of theme.
# However, I am not sure whether it is a persuasive reason
# because there are only 3 rows of the data of "charge"
# while "give" has 403 rows.
#part II
diffMeans = function(x,y){
x=mean(x) #get mean of x
y=mean(y) #get mean of y
z=x-y #mean of x minus mean of y
MeanOutput = list("meanx", x, "meany",y,"difference of means", abs(z) )
#create list to output multiple numeric result
#output mean of x,y, and their difference
#output of difference won't be negative number,don't worry about the order
return(MeanOutput)
}
#Then use the two data to get the result of the difference
diffMeans(verbs.charge$LengthOfTheme,verbs.give$LengthOfTheme)
#PART I
#TASK I
library(languageR)
head(verbs)$LengthOfTheme
#TASK II
nrow(verbs)
#TASK III
verbs[11:20, ]
#TASK IV
verbs.give=subset(verbs,Verb=="give")
#TASK V
verbs.charge=subset(verbs,Verb=="charge")
#TASKVI
a=c(verbs.give$LengthOfTheme)
mean(a)
b=c(verbs.charge$LengthOfTheme)
mean(b)
#The two verbs, though have great gap in using frequency, are very close(0.336443)in the average of length of theme.
#PART II
#1.Create a function
diffMeans=function(x=mean(x),y=mean(y))(
z=mean(x)-mean(y)
)
#2.send the LengthOfTheme column
diffMeans(x=mean(a),y=mean(b))
# Load a package using the function library()
library(languageR)
# Show the first six rows of the "verbs" data set
head(verbs)
#Part I
#Task I
head(verbs)$LengthOfTheme
#Task II
nrow(verbs)
#Task III
verbs[11:20, "RealizationOfRec"]
#Task IV
verbs.give=subset(verbs,Verb == "give")
#Task V
verbs.charge=subset(verbs,Verb == "charge")
#Task VI
mean(verbs.give$LengthOfTheme)
#the average length of theme of verb.give is 1.666104
mean(verbs.charge$LengthOfTheme)
#the average length of theme of verb.charge is 1.329661
#The themes of "charge" are inanimate,
#but the themes of "give" are animate and inanimate.
#Therefore, the length of the themes of two verbs are different.
#Part II
diffMeans = function(x,y){
z = x - y
z
}
diffMeans(x=1.666104, y=1.329661)
#Part I
# Load a package using the function library()
library(languageR)
# Show the first six rows of the "verbs" data set
head(verbs)
#Task 1: List the first six value of LengthOfTheme
head(verbs["LengthOfTheme"])
#Task 2: Check how many rows there are in verbsusing nrow().
nrow(verbs)
#Task 3: Extract a subset of the data set using df[x, y] statement
verbs[11:20, 1]
#Task 4:
verbs.give = verbs[verbs$Verb == "give", ]
verbs.give
#Task 5:
verbs.charge = verbs[verbs$Verb == "charge", ]
verbs.charge
#Task 6:
mean(verbs[verbs$Verb == "give", 5])
mean(verbs[verbs$Verb == "charge", 5])
#Part II
diffMeans = function(x, y) {
z = mean(x)-mean(y)
z
}
diffMeans(verbs[verbs$Verb == "give", 5], verbs[verbs$Verb == "charge", 5])
#Part I
# Load a package using the function library()
library(languageR)
# Show the first six rows of the "verbs" data set
head(verbs)
#Task 1: List the first six value of LengthOfTheme
head(verbs["LengthOfTheme"])
#Task 2: Check how many rows there are in verbsusing nrow().
nrow(verbs)
#Task 3: Extract a subset of the data set using df[x, y] statement
verbs[11:20, 1]
#Task 4:
verbs.give = verbs[verbs$Verb == "give", ]
verbs.give
#Task 5:
verbs.charge = verbs[verbs$Verb == "charge", ]
verbs.charge
#Task 6:
mean(verbs[verbs$Verb == "give", 5])
mean(verbs[verbs$Verb == "charge", 5])
#Part II
diffMeans = function(x, y) {
z = mean(x)-mean(y)
z
}
diffMeans(verbs[verbs$Verb == "give", 5], verbs[verbs$Verb == "charge", 5])
#Part I
library(languageR)
head(verbs)
#Task I
head(verbs)$LengthOfTheme[1:6]
#Task II
nrow(verbs)
#Task III
df = verbs
df[11:20, 1]
#Task IV
verbs.give = df[verbs$Verb == 'give', ]
verbs.give
#Task V
verbs.charge = df[verbs$Verb == 'charge', ]
verbs.charge
#Task VI
mean(verbs.give$LengthOfTheme)
mean(verbs.charge$LengthOfTheme) #The average word length of Theme that can be used with "give" is longer than those can be used with "charge".
#Part II
diffMeans = function(x, y) {
z = mean(x) - mean(y)
return(z)
}
diffMeans(verbs.give$LengthOfTheme, verbs.charge$LengthOfTheme)
#Part I
library(languageR)
head(verbs)
#Task I
head(verbs)$LengthOfTheme[1:6]
#Task II
nrow(verbs)
#Task III
df = verbs
df[11:20, 1]
#Task IV
verbs.give = df[verbs$Verb == 'give', ]
verbs.give
#Task V
verbs.charge = df[verbs$Verb == 'charge', ]
verbs.charge
#Task VI
mean(verbs.give$LengthOfTheme)
mean(verbs.charge$LengthOfTheme) #The average word length of Theme that can be used with "give" is longer than those can be used with "charge".
#Part II
diffMeans = function(x, y) {
z = mean(x) - mean(y)
return(z)
}
diffMeans(verbs.give$LengthOfTheme, verbs.charge$LengthOfTheme)
summary(c(1,4,2,50))
summary(1:100)
summary(0:100)
summary(c(1,4,2,8,50))
library(languageR)
head(verbs)
xtabs(~ RealizationOfRec + AnamacyOfRec)
xtabs(~ RealizationOfRec + AnamacyOfRec, data = verbs)
xtabs(~ RealizationOfRec + AnimacyOfRec, data = verbs)
xtabs(~ RealizationOfRec + AnimacyOfRec, data = verbs) / nrow(verbs)
xtabs(~ RealizationOfRec + AnimacyOfRec, data = verbs) / nrow(verbs) * 100
xtabs(~ RealizationOfRec + AnimacyOfRec, data = subset(verbs, Verb == "give" | Verb == "tell") / nrow(verbs) * 100
xtabs(~ RealizationOfRec + AnimacyOfRec, data = subset(verbs, Verb == "give" | Verb == "tell")) / nrow(subset(verbs, Verb == "give" | Verb == "tell"))) * 100
xtabs(~ RealizationOfRec + AnimacyOfRec, data = subset(verbs, Verb == "give" | Verb == "tell")) / nrow(subset(verbs, Verb == "give" | Verb == "tell"))
table(verbs$Verb)
xtabs(~ RealizationOfRec + AnimacyOfRec, data = subset(verbs, Verb == "give" | Verb == "tell")) / nrow(subset(verbs, Verb == "give" | Verb == "sell"))
xtabs(~ RealizationOfRec + AnimacyOfRec, data = subset(verbs, Verb == "give" | Verb == "sell")) / nrow(subset(verbs, Verb == "give" | Verb == "sell"))
xtabs(~ RealizationOfRec + AnimacyOfRec, data = subset(verbs, Verb == "give" | Verb == "sell"))
head(verbs)
qqnorm(verbs$LengthOfTheme)
qqline(verbs$LengthOfTheme, col = "red")
head(subset(verbs, LengthOfTheme < 1))
verbs.sub = subset(verbs, LengthOfTheme > 0)
qqnorm(verbs.sub$LengthOfTheme)
qqline(verbs.sub$LengthOfTheme)
verbs.sub = subset(verbs, LengthOfTheme >= 1)
qqnorm(verbs.sub$LengthOfTheme)
qqline(verbs.sub$LengthOfTheme, col = "red")
plot(density(verbs.sub$LengthOfTheme))
verbs.sub = subset(verbs, LengthOfTheme >= 1)
plot(density(verbs.sub$LengthOfTheme))
qqnorm(verbs.sub$LengthOfTheme)
qqline(verbs.sub$LengthOfTheme, col = "red")
nrow(verbs)
nrow(dative)
qqnorm(dative$LengthOfTheme)
qqline(dative$LengthOfTheme, col = "red")
plot(density(dative$LengthOfTheme))
subset(dative, LengthOfTheme > 10)
mean(dative$LengthOfTheme)
dative.sub = subset(dative, LengthOfTheme < 4.271529 * 1.96)
plot(density(dative.sub$LengthOfTheme))
plot(density(log(dative$LengthOfTheme)))
setwd("D:/OneDrive/Documents/Academic Works/NTHU/Courses/Language and Statistics in R/GitHub/Statistics_in_R/Week3-4")
source("https://lngproc.fl.nthu.edu.tw/statisticsR/Assignment III.R")
source("https://lngproc.fl.nthu.edu.tw/statisticsR/Week3-4/Assignment III.R")
head(vh.data)
head(vh.subj)
plot(density(vh.subj$WMTotal))

labs(title = "RT variation by Word Frequency in Lexical Decision",
x = "log Word Frequency", y = "log Reaction Time",
caption = "Frequency: B = -0.035, t(1498) = -7.937, p < .001") +
theme_bw()
library(ggplot2)
ggplot(mapping = aes(x = Frequency, y = RT), data = lexdec.sub) +
geom_point(alpha = 0.5, color = "darkgrey") +
geom_smooth(method = "lm", width = 1.5, color = "red") +
labs(title = "RT variation by Word Frequency in Lexical Decision",
x = "log Word Frequency", y = "log Reaction Time",
caption = "Frequency: B = -0.035, t(1498) = -7.937, p < .001") +
theme_bw()
# Task IX
library(ggplot2)
ggplot(mapping = aes(x = Frequency, y = RT), data = lexdec.sub) +
geom_point(alpha = 0.5, color = "darkgrey") +
geom_smooth(method = "lm", lwd = 1.5, color = "red") +
labs(title = "RT variation by Word Frequency in Lexical Decision",
x = "log Word Frequency", y = "log Reaction Time",
caption = "Frequency: B = -0.035, t(1498) = -7.937, p < .001") +
theme_bw()
# Task IX
library(ggplot2)
ggplot(mapping = aes(x = Frequency, y = RT), data = lexdec.sub) +
geom_point(alpha = 0.5, color = "darkgrey", size = 1.5) +
geom_smooth(method = "lm", lwd = 1.5, color = "red") +
labs(title = "RT variation by Word Frequency in Lexical Decision",
x = "log Word Frequency", y = "log Reaction Time",
caption = "Frequency: B = -0.035, t(1498) = -7.937, p < .001") +
theme_bw()
library(ggplot2)
ggplot(mapping = aes(x = Frequency, y = RT), data = lexdec.sub) +
geom_point(alpha = 0.5, color = "darkgrey", size = 3) +
geom_smooth(method = "lm", lwd = 1.5, color = "red") +
labs(title = "RT variation by Word Frequency in Lexical Decision",
x = "log Word Frequency", y = "log Reaction Time",
caption = "Frequency: B = -0.035, t(1498) = -7.937, p < .001") +
theme_bw()
# Task X
new.values = data.frame(Frequency = seq(from = 2, to = 3, by = 0.1),
FamilySize = seq(from = 0.5, to = 1.5, by = 0.1))
predict(object = lexdec.lm, newdata = new.values)
plot(density(lexdec.sub$RT), main = "log-RT distribution in the lexdec dataset")
plot(density(lexdec.sub$Frequency), main = "log-Frequency distribution in the lexdec dataset")
# Task IIb.
plot(RT ~ Frequency, data = lexdec.sub, main = "The RT-Frequency correlation in the lexdec dataset",
xlab = "log Word Frequency", ylab = "log RT", ylim = c(5.8, 7))
summary(lexdec.lm2)
summary(lexdec.lm)
summary(lexdec.lm3)
library(languageR)
?imaging
head(imaging)
?beginningReaders
head(beginningReaders)
?etym
?etymology
head(finalDevoicing)
?finalDevoicing
?regularity
?affixProductivity
head(affixProductivity)
?heid
?primingHeid
head(primingHeid)
69/log(69)
readLines("https://hakkadict.moe.edu.tw/cgi-bin/gs32/gsweb.cgi?o=dalldb&s=id=%22HK0000000103%22.&searchmode=basic&checknoback=1")
readLines("https://hakkadict.moe.edu.tw/cgi-bin/gs32/gsweb.cgi?o=dalldb&s=id=%22HK0000000104%22.&searchmode=basic&checknoback=1")
misc = c(1, "string")
class(misc)
class(misc[1])
class(misc[2])
misc
install.packages("keras")
library(reticulate)
virtualenv_create("r-reticulate", python = install_python())
library(keras)
install_keras(envname = "r-reticulate")
install.packages(c("languageR", "lme4", "car", "psych", "ggplot2"), dependencies = T, ask = F)
install.packages("tidyverse", dependencies = T)
install.packages("keras")
library(reticulate)
virtualenv_create("r-reticulate", python = install_python())
install_python()
reticulate::install_python()
virtualenv_create("r-reticulate", python = install_python())
virtualenv_create("r-reticulate")
install.packages("keras")
library(reticulate)
virtualenv_create("r-reticulate", python = install_python())
virtualenv_create("r-reticulate")
library(keras)
install_keras(envname = "r-reticulate")
library(tensorflow)
install_keras(envname = "r-reticulate")
library(keras)
install_keras(envname = "r-reticulate")
?tensorflow
install_keras()
tensorflow::as_tensor("Hello World")
keras::install_keras()
library(keras)
install_keras(envname = "r-reticulate")
?install_keras
install_keras(envname = "r-reticulate", version = "2.12.*")
install_keras(envname = "r-reticulate", version = 2.12)
install_keras(envname = "r-reticulate", version = 2.14)
install_keras(envname = "r-reticulate", version = 2.1)
install_keras(envname = "r-reticulate", version = 2)
install_keras(envname = "r-reticulate", version = "2.13")
install_keras(envname = "r-reticulate", version = "2.12")
install_keras(envname = "r-reticulate", version = "nightly")
library(reticulate)
virtualenv_create("r-reticulate")
library(keras)
install_keras(envname = "r-reticulate")
library(keras)
install_keras(envname = "r-reticulate")
library(languageR)
head(durationsGe)
head(durationsOnt)
head(english)
head(lexdec)
head(english)
source("https://github.com/nthuTYChen/Statistics_in_R/blob/main/2024/Week1/replicate.R")
source("https://github.com/nthuTYChen/Statistics_in_R/blob/main/2024/Week1/replicate.R")
source("https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/2024/Week1/replicate.R")
resourcesURL =
"https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/2004/Week1/"
df = read.csv(paste(resourcesURL, "dummyDataFrame.csv", sep = ""))
resourcesURL =
"https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/2024/Week1/"
df = read.csv(paste(resourcesURL, "dummyDataFrame.csv", sep = ""))
df
sample(c(1, 2, 3, 4, 5, 6, 7), 3)
sample(c(1, 2, 3, 4, 5, 6, 7), 3)
sample(c(1, 2, 3, 4, 5, 6, 7), 3)
sample(c(1, 2, 3, 4, 5, 6, 7), 3)
sample(c(1, 2, 3, 4, 5, 6, 7), 3)
sample(c(1, 2, 3, 4, 5, 6, 7), 3)
sample(c(1, 2, 3, 4, 5, 6, 7), 3)
sample(c(1, 2, 3, 4, 5, 6, 7), 3)
sample(c(1, 2, 3, 4, 5, 6, 7), 3)
sample(c(1, 2, 3, 4, 5, 6, 7), 3)
sample(c(1, 2, 3, 4, 5, 6, 7), 3)
sample(c(1, 2, 3, 4, 5, 6, 7), 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
sample(1:100, 3)
?sample
sample(1:100, 3, replace = T)
sample(1:100, 3, replace = T)
sample(1:100, 3, replace = T)
sample(1:100, 3, replace = T)
sample(1:100, 3, replace = T)
sample(1:100, 3, replace = T)
sample(1:100, 3, replace = T)
sample(1:4, 3, replace = T)
sample(1:4, 3, replace = T)
sample(1:4, 3, replace = T)
sample(1:4, 3, replace = T)
sample(1:4, 3, replace = T)
sample(1:4, 3, replace = T)
sample(1:4, 3, replace = T)
sample(1:4, 3, replace = T)
sample(1:4, 3, replace = T)
for(1:100) { print('hi!') }
for(i in 1:100) { print('hi!') }
c(1, 20, 30) > 80
if(c(1, 20, 30) > 80) { print('yes') }
for(i in 1:50) { sample(1:100, 3) }
for(i in 1:50) { print(sample(1:100, 3)) }
library(languageR)
head(verbs)
nrow(verbs)
x = c(1,1,1,1,1,2,2,3,3,3,3,3,3,3,3,3,4,4,5,5,5)
y = c(1,1,1,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,5,5)
plot(x, y)
abline(lm(y ~ x), col = "red")
set.seed(88)
x = rnorm(n = 100) * runif(n = 100)
x
x = rnorm(n = 100) * runif(n = 100)
x
set.seed(88)
x = rnorm(n = 100) * runif(n = 100)
x
set.seed(88) 	# Set the random seed no.88
# Sample 100 values from a normal distribution (mean = 10, sd = 2)
x = rnorm(n = 100, mean = 10, sd = 2)
# Sample 100 values from a uniform distribution (between 0 and 1)
noise = runif(n = 100)
# Multiply x with noise to simulate a messier data distribution
x.noi = x * noise
# Check the range of our "sample" data distribution
range(x.noi)
set.seed(88) 	# Set the random seed no.88
# Sample 100 values from a normal distribution (mean = 10, sd = 2)
x = rnorm(n = 100, mean = 10, sd = 2)
# Sample 100 values from a uniform distribution (between 0 and 1)
noise = runif(n = 100)
# Multiply x with noise to simulate a messier data distribution
x.noi = x * noise
# Check the range of our "sample" data distribution
range(x.noi)
set.seed(88) 	# Set the random seed no.88
# Sample 100 values from a normal distribution (mean = 10, sd = 2)
x = rnorm(n = 100, mean = 10, sd = 2)
# Sample 100 values from a uniform distribution (between 0 and 1)
noise = runif(n = 100)
# Multiply x with noise to simulate a messier data distribution
x.noi = x * noise
# Check the range of our "sample" data distribution
range(x.noi)
# [1] 0.02286492 11.63822827
# Check the mean and SD of the "sample"
mean(x.noi) 	#
sd(x.noi) 	#
# Create a sequence of numeric values ranging from 0 to 12 separated by 0.01
# to cover the upper and lower boundary in our "sample" distribution
range.seq = seq(from = 0, to = 12, by = 0.01)
# Calculate the density of every single value in range.seq in a normal
# distribution of the same mean and SD
set.seed(88) 	# Set the random seed no.88
# Sample 100 values from a normal distribution (mean = 10, sd = 2)
nums = rnorm(n = 100, mean = 10, sd = 2)
# Sample 100 values from a uniform distribution (between 0 and 1)
noise = runif(n = 100)
# Multiply nums with noise to simulate a messier data distribution
nums.noi = nums * noise
# Check the range of our "sample" data distribution
range(nums.noi)
# [1] 0.02286492 11.63822827
# Get the mean and SD of the "sample"
nums.mean = mean(nums.noi) 	# 4.60009
nums.sd = sd(nums.noi) 		# 3.102307
# Create a sequence of numeric values ranging from 0 to 12 separated by 0.01
# to cover the upper and lower boundary in our "sample" distribution
range.seq = seq(from = 0, to = 12, by = 0.01)
# Calculate the density of every single value in range.seq in a normal
# distribution of the same mean and SD using dnorm(), so we can visualize
# our theoretical distribution later.
range.seq.d = dnorm(x = nums, mean = nums.mean, sd = sd.mean)
set.seed(88) 	# Set the random seed no.88
# Sample 100 values from a normal distribution (mean = 10, sd = 2)
nums = rnorm(n = 100, mean = 10, sd = 2)
# Sample 100 values from a uniform distribution (between 0 and 1)
noise = runif(n = 100)
# Multiply nums with noise to simulate a messier data distribution
nums.noi = nums * noise
# Check the range of our "sample" data distribution
range(nums.noi)
# [1] 0.02286492 11.63822827
# Get the mean and SD of the "sample"
nums.mean = mean(nums.noi) 	# 4.60009
nums.sd = sd(nums.noi) 		# 3.102307
# Create a sequence of numeric values ranging from 0 to 12 separated by 0.01
# to cover the upper and lower boundary in our "sample" distribution
range.seq = seq(from = 0, to = 12, by = 0.01)
# Calculate the density of every single value in range.seq in a normal
# distribution of the same mean and SD using dnorm(), so we can visualize
# our theoretical distribution later.
range.seq.d = dnorm(x = nums, mean = nums.mean, sd = nums.sd)
Now, we can generate the density plot of our sample distribution with nums and add the density information of nums (i.e., nums.d) obtained from a corresponding normal distribution to make our comparison, which is visualized in the figure below.
set.seed(88) 	# Set the random seed no.88
# Sample 100 values from a normal distribution (mean = 10, sd = 2)
nums = rnorm(n = 100, mean = 10, sd = 2)
# Sample 100 values from a uniform distribution (between 0 and 1)
noise = runif(n = 100)
# Multiply nums with noise to simulate a messier data distribution
nums.noi = nums * noise
# Check the range of our "sample" data distribution
range(nums.noi)
# [1] 0.02286492 11.63822827
# Get the mean and SD of the "sample"
nums.mean = mean(nums.noi) 	# 4.60009
nums.sd = sd(nums.noi) 		# 3.102307
# Create a sequence of numeric values ranging from 0 to 12 separated by 0.01
# to cover the upper and lower boundary in our "sample" distribution
range.seq = seq(from = 0, to = 12, by = 0.01)
# Calculate the density of every single value in range.seq in a normal
# distribution of the same mean and SD using dnorm(), so we can visualize
# our theoretical distribution later.
range.seq.d = dnorm(x = nums, mean = nums.mean, sd = nums.sd)
plot(density(nums)) 	# Generate the density plot of our sample
# Add a purple curve line with a line width of 2, which shows the density
# information (range.seq.d) of each value in range.seq on the x-y plane
lines(x = range.seq, y = range.seq.d, col = "purple", lwd = 2)
plot(density(nums)) 	# Generate the density plot of our sample
# Add a purple curve line with a line width of 2, which shows the density
# information (range.seq.d) of each value in range.seq on the x-y plane
lines(x = range.seq, y = range.seq.d, col = "purple", lwd = 2)
range.seq = seq(from = 0, to = 12, by = 0.01)
# Calculate the density of every single value in range.seq in a normal
# distribution of the same mean and SD using dnorm(), so we can visualize
# our theoretical distribution later.
range.seq.d = dnorm(x = range.seq, mean = nums.mean, sd = nums.sd)
plot(density(nums)) 	# Generate the density plot of our sample
# Add a purple curve line with a line width of 2, which shows the density
# information (range.seq.d) of each value in range.seq on the x-y plane
lines(x = range.seq, y = range.seq.d, col = "purple", lwd = 2)
plot(density(nums.noi)) 	# Generate the density plot of our sample
# Add a purple curve line with a line width of 2, which shows the density
# information (range.seq.d) of each value in range.seq on the x-y plane
lines(x = range.seq, y = range.seq.d, col = "purple", lwd = 2)
range.seq = seq(from = -5, to = 15, by = 0.01)
# Calculate the density of every single value in range.seq in a normal
# distribution of the same mean and SD using dnorm(), so we can visualize
# our theoretical distribution later.
range.seq.d = dnorm(x = range.seq, mean = nums.mean, sd = nums.sd)
plot(density(nums.noi)) 	# Generate the density plot of our sample
# Add a purple curve line with a line width of 2, which shows the density
# information (range.seq.d) of each value in range.seq on the x-y plane
lines(x = range.seq, y = range.seq.d, col = "purple", lwd = 2)
plot(density(nums.noi), xlim = c(-5, 15), ylim = c(0, 0.15)
# Add a purple curve line with a line width of 2, which shows the density
# information (range.seq.d) of each value in range.seq on the x-y plane
lines(x = range.seq, y = range.seq.d, col = "purple", lwd = 2)
plot(density(nums.noi), xlim = c(-5, 15), ylim = c(0, 0.15)
)
lines(x = range.seq, y = range.seq.d, col = "purple", lwd = 2)
set.seed(87) 	# Set the random seed no.88
# Sample 100 values from a normal distribution (mean = 10, sd = 2)
nums = rnorm(n = 100, mean = 10, sd = 2)
# Sample 100 values from a uniform distribution (between 0 and 1)
noise = runif(n = 100)
# Multiply nums with noise to simulate a messier data distribution
nums.noi = nums * noise
# Check the range of our "sample" data distribution
range(nums.noi)
# [1] 0.02286492 11.63822827
# Get the mean and SD of the "sample"
nums.mean = mean(nums.noi) 	# 4.60009
nums.sd = sd(nums.noi) 		# 3.102307
# Create a sequence of numeric values ranging from 0 to 12 separated by 0.01
# to cover the upper and lower boundary in our "sample" distribution
range.seq = seq(from = -5, to = 15, by = 0.01)
# Calculate the density of every single value in range.seq in a normal
# distribution of the same mean and SD using dnorm(), so we can visualize
# our theoretical distribution later.
range.seq.d = dnorm(x = range.seq, mean = nums.mean, sd = nums.sd)
plot(density(nums.noi), xlim = c(-5, 15), ylim = c(0, 0.15),
main = "Sample vs. Theoretical Distribution")
set.seed(86) 	# Set the random seed no.88
# Sample 100 values from a normal distribution (mean = 10, sd = 2)
nums = rnorm(n = 100, mean = 10, sd = 2)
# Sample 100 values from a uniform distribution (between 0 and 1)
noise = runif(n = 100)
# Multiply nums with noise to simulate a messier data distribution
nums.noi = nums * noise
# Check the range of our "sample" data distribution
range(nums.noi)
# [1] 0.02286492 11.63822827
# Get the mean and SD of the "sample"
nums.mean = mean(nums.noi) 	# 4.60009
nums.sd = sd(nums.noi) 		# 3.102307
# Create a sequence of numeric values ranging from 0 to 12 separated by 0.01
# to cover the upper and lower boundary in our "sample" distribution
range.seq = seq(from = -5, to = 15, by = 0.01)
# Calculate the density of every single value in range.seq in a normal
# distribution of the same mean and SD using dnorm(), so we can visualize
# our theoretical distribution later.
range.seq.d = dnorm(x = range.seq, mean = nums.mean, sd = nums.sd)
plot(density(nums.noi), xlim = c(-5, 15), ylim = c(0, 0.15),
main = "Sample vs. Theoretical Distribution")
set.seed(85) 	# Set the random seed no.88
# Sample 100 values from a normal distribution (mean = 10, sd = 2)
nums = rnorm(n = 100, mean = 10, sd = 2)
# Sample 100 values from a uniform distribution (between 0 and 1)
noise = runif(n = 100)
# Multiply nums with noise to simulate a messier data distribution
nums.noi = nums * noise
# Check the range of our "sample" data distribution
range(nums.noi)
# [1] 0.02286492 11.63822827
# Get the mean and SD of the "sample"
nums.mean = mean(nums.noi) 	# 4.60009
nums.sd = sd(nums.noi) 		# 3.102307
# Create a sequence of numeric values ranging from 0 to 12 separated by 0.01
# to cover the upper and lower boundary in our "sample" distribution
range.seq = seq(from = -5, to = 15, by = 0.01)
# Calculate the density of every single value in range.seq in a normal
# distribution of the same mean and SD using dnorm(), so we can visualize
# our theoretical distribution later.
range.seq.d = dnorm(x = range.seq, mean = nums.mean, sd = nums.sd)
plot(density(nums.noi), xlim = c(-5, 15), ylim = c(0, 0.15),
main = "Sample vs. Theoretical Distribution")
set.seed(1) 	# Set the random seed no.88
# Sample 100 values from a normal distribution (mean = 10, sd = 2)
nums = rnorm(n = 100, mean = 10, sd = 2)
# Sample 100 values from a uniform distribution (between 0 and 1)
noise = runif(n = 100)
# Multiply nums with noise to simulate a messier data distribution
nums.noi = nums * noise
# Check the range of our "sample" data distribution
range(nums.noi)
# [1] 0.02286492 11.63822827
# Get the mean and SD of the "sample"
nums.mean = mean(nums.noi) 	# 4.60009
nums.sd = sd(nums.noi) 		# 3.102307
# Create a sequence of numeric values ranging from 0 to 12 separated by 0.01
# to cover the upper and lower boundary in our "sample" distribution
range.seq = seq(from = -5, to = 15, by = 0.01)
# Calculate the density of every single value in range.seq in a normal
# distribution of the same mean and SD using dnorm(), so we can visualize
# our theoretical distribution later.
range.seq.d = dnorm(x = range.seq, mean = nums.mean, sd = nums.sd)
plot(density(nums.noi), xlim = c(-5, 15), ylim = c(0, 0.15),
main = "Sample vs. Theoretical Distribution")
lines(x = range.seq, y = range.seq.d, col = "purple", lwd = 2)
qqnorm(nums.noi, main="Normal Q-Q Plot: nums.noi")
qqline(nums.noi, col="red")	# Add a line of "perfect correlation"
library(tidyverse)
source("https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/cou
rseUtil.R")
source("https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/courseUtil.R")
wordRT = tibble(loadCourseCSV(year = 2024, topic = "3_Data", file = "wordRT.csv"))
wordRT
?gather
wordRT %>% gather(Word, "Gender", "RT")
stocks <- tibble(
time = as.Date("2009-01-01") + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
gather(stocks, "stock", "price", -time)
stocks %>% gather("stock", "price", -time)
sticks
stocks
wordRT %>% gather("Gender", "RT")
wordRT %>% gather("Gender", "RT", -Word)
wordRT %>% gather("Word", "Gender", "RT")
wordRT %>% pivot_longer(c("Gender", "RT"))
wordRT %>% pivot_longer(c("Male", "Female"))
wordRT %>% pivot_longer(c("Male", "Female"), names_to = "Gender", values_to = "RT")
jabberwocky.wd = loadCourseCSV(2024, "3_Data", "jabberwocky_words.txt")
head(jabberwocky.wd)
jabberwocky.wd = tibble(loadCourseCSV(2024, "3_Data", "jabberwocky_words.txt"))
jabberwocky.wd %>% count(Word)
?count
jabberwocky.wd %>% count(Word, name = "Freq")
jabberwocky.wd %>% count(Word, name = "Freq", sort = T)
strs = c("This is not a long sentence.")
strs.token = strsplit(strs, " ")
strs.token
strs.token = unlist(strsplit(strs, " "))
strs.token
strs.token = strsplit(strs, " ")
strs.token[1]
strs.token[[1]]
strs.token[[1]][]
strs.token[[1]][1]
set.seed(100) # Set the random seed
# Create a for loop in which n starts with 1 and increases by 1 after each cycle.
# The loop stops after the end of a cycle in which n becomes 50.
for(n in 1:20) {
# Randomly sample one value from a normal distribution using rnorm().
# Since the distribution has a mean of 0 and an sd of 1, which are the default
# values for the corresponding parameters in rnorm(), you don't have to specify
# the two parameters in this line. The randomly selected value is stored as
# "val".
val = rnorm(n = 1)
print(val) # Just print out the random value in each cycle.
}
1/20
library(ggplot2)
?geom_boxplot()
setwd("D:/OneDrive - NTHU/Academic Works/NTHU/Courses/Language and Statistics in R/GitHub/Statistics_in_R/2024/3_Data")
# Introduction to parametric tests that deal with CONTINUOUS data
# Let's being with a z-test
# Research question: Assuming that the population of 3-year-olds has an average
# vocabulary size of 300 words that vary by 40 words on average, do the children of
# the same age from a family with a higher socio-economic status have a significantly
# larger vocabulary size?
# Critical "parameters" in a parametric tests
mean.pop = 300    # Assumed population mean
sd.pop = 40       # Assumed population variance (SD)
mean.sample = 320 # The sample mean of vocabulary size
n = 10            # The sample sizeL Only ten 3-year-old children
# Standard Error
se = 40 / sqrt(10)
# z-value (different from a z-score; see the Unit 4 handout)
z = (mean.sample - mean.pop) / se
# Our sample mean is higher than the assumed population mean, so we calculate
# the upper tail p value in a normal distribution of differences based on
# the z-value obtained above.
pnorm(q = z, lower.tail = F)
log10(10)
log(2.718281828459)
log10(1/10)

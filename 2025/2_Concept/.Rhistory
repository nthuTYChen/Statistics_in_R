for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:100) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:100) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(M)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
t.upper = (320 - 300) / (40 / sqrt(10))
# pt() acts like pnorm(), except that you need to input the df info.
p.upper = pt(q = t.upper, df = 10 - 1, lower.tail = FALSE)
p.upper * 2	# Two-tailed p-value
t.upper = (325 - 300) / (40 / sqrt(10))
# pt() acts like pnorm(), except that you need to input the df info.
p.upper = pt(q = t.upper, df = 10 - 1, lower.tail = FALSE)
p.upper * 2	# Two-tailed p-value
library(languageR)
r = -0.04927405
n = length(durationsOnt$Frequency)
# x^y = x to the power of y
t = r / (sqrt(1 - r^2) / sqrt(n - 2))
t
[1] -0.4933398
p = pt(t, df = n - 2)
p
p * 2
# Use scale() to convert a sample into z-scores
freq.z = scale(durationsOnt$Frequency)
dur.z = scale(durationsOnt$DurationOfPrefix)
cor.test(x = freq.z, y = dur.z)
Myers.clean = loadCourseCSV(2024, "4_Parametric", "MyersClean.csv")
source("https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/courseUtil.R")
# The "clean" data set
Myers.clean = loadCourseCSV(2024, "4_Parametric", "MyersClean.csv")
source("https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/courseUtil.R")
overgen = loadCourseCSV(2024, "4_Parametric ", "overgen.csv")
overgen = loadCourseCSV(2024, "4_Parametric", "overgen.csv")
sl.sim = loadCourseCSV(2024, "5_ANOVA", "SaitoLysterSim.csv")
sl.rep.sim = loadCourseCSV(2024, "5_ANOVA", "SaitoLysterRepSim.csv")
chen.sample = loadCourseCSV(2024, "5_ANOVA", "Chen2020Sample.csv")
source("https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/courseUtil.R")
log(1)
chen.sample = loadCourseCSV(2024, "6_Regression", "Chen2020Sample.csv")
Myers.clean = loadCourseCSV(2024, "7_Nonparametric", "MyersClean.csv")
chen.sample = loadCourseCSV(2024, "6_Regression", "Chen2020Sample.csv")
# Set a random seed
set.seed(999)
# Create a population vector with 50000 "like"s and 50000 "unlike"s
population = c(rep("Like", 50000), rep("Unlike", 50000))
sampleN = 13952
targetHits = 3333
sample.count = 0	# Use as a counter to record the number of target samples
# Repeat the same process for 100 times
for(i in 1:100) {
testSample = sample(population, sampleN)
# == convert the testSample vector into a boolean vector
# sum() gives the number of TRUE in the vector
hitsN = sum(testSample == "Like")
# So we can check the number of hits for each sample
print(hitsN)
# Check if the number of hits <= targetHits
if(hitsN <= targetHits) {
# If TRUE, add 1 to sample.count
sample.count = sample.count + 1
}
}
# Still very unlikely
sample.count
vocab.thao.mand = loadCourseCSV(2024, "7_Nonparametric", "vocabThaoMand.csv")
wilcox.test(formula = Vocab ~ Group, data = vocab.thao.mand)
vocab.thao.mand
resourcesURL =
"https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/2024/1_Intro/"
df = read.csv(paste(resourcesURL, "dummyDataFrame.csv", sep = ""))
df
# Preparation works
library(languageR)
head(verbs)
# 1-1: Use 6:11 for a vector of sequential numbers from 6 to 11, and use
#      this vector to retrieve the corresponding LengthOfTheme values from "verbs"
rows = 6:11
verbs[rows, ]$LengthOfTheme
head(verbs[2])
lastRow = nrow(verbs)
lastRow
firstRow = lastRow - 10
firstRow
verbs[893:903,]$LengthOfTheme
verbs[firstRow:lastRow,]$LengthOfTheme
fiveLengths = verbs[1:5,]$LengthOfTheme
mean(fiveLengths)
LengthDifference(10, 18)
LengthDifference = function(row1, row2) {
# Get the first length value based on row1
length1 = verbs[row1,]$LengthOfTheme
# Get the second length value based on row2
length2 = verbs[row2,]$LengthOfTheme
# Calculate the difference between the two
diff = length1 - length2
# Print out the difference
print(diff)
}
# Test the function by sending different row numbers
LengthDifference(10, 18)
LengthDifference(301, 25)
source("https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/202
4/1_Introduction/replicate.R")
source("https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/2024/1_Introduction/replicate.R")
source("https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/2024/1_Intro/replicate.R")
dir()
wd()
setwd()
getwd()
# Preparation works
library(languageR)
head(verbs)
# 1-1: Use 10:12 for a vector of sequential numbers from 10 to 12, and use
#      this vector to retrieve the corresponding LengthOfTheme values from "verbs"
rows = 10:12
verbs[rows, ]$LengthOfTheme
seqs = c(6:10, 1:20, 55:57)
head(seqs)
verbs[seqs,]
verbs[seqs,]$Verb
verbs[2]
head(verbs)
verbs[1:6,]$Verb
x = rnorm(n = 100, mean = 10, sd = 2) * randu()
x = rnorm(n = 100, mean = 10, sd = 2) * randu
x
x = rnorm(n = 100, mean = 10, sd = 2) * runif()
x = rnorm(n = 100, mean = 10, sd = 2) * runif(, = 100)
x = rnorm(n = 100, mean = 10, sd = 2) * runif(n = 100)
x
mean(x)
sd()
sd(x)
?rnorm
dnorm(x = x, mean = 4.656921, sd = 3.335105)
plot(dnorm(x = x, mean = 4.656921, sd = 3.335105))
plot(order(dnorm(x = x, mean = 4.656921, sd = 3.335105)))
runif(2)
plot(density(x))
curve(density(rnorm(n = 100, mean = 3.335105, sd = 3.335105)))
curve(x = density(rnorm(n = 100, mean = 3.335105, sd = 3.335105)))
?curve
curve(rnorm(n = 100, mean = 3.335105, sd = 3.335105))
lines(density(rnorm(n = 100, mean = 3.335105, sd = 3.335105)))
lines(density(rnorm(n = 100, mean = 3.335105, sd = 3.335105)), col = "purple")
plot(density(x), xlim = c(-15, 15))
plot(density(x), xlim = c(-10, 20))
lines(density(rnorm(n = 10000, mean = 3.335105, sd = 3.335105)), col = "purple", lwd = 2)
lines(dnorm(x = seq(from = -10, to = 15, sep = 0.1), mean = 3.335105, sd = 3.335105)), col = "purple", lwd = 2)
?seq
lines(dnorm(x = seq(from = -10, to = 15, by = 0.1), mean = 3.335105, sd = 3.335105)), col = "purple", lwd = 2)
lines(dnorm(x = seq(from = -10, to = 15, by = 0.1), mean = 3.335105, sd = 3.335105), col = "purple", lwd = 2)
lines(dnorm(x = seq(from = -10, to = 10, by = 0.1), mean = 3.335105, sd = 3.335105), col = "purple", lwd = 2)
lines(dnorm(x = seq(from = -10, to = 15, by = 0.1), mean = 4.656921, sd = 3.335105)), col = "purple", lwd = 2)
lines(dnorm(x = seq(from = -10, to = 15, by = 0.1), mean = 4.656921, sd = 3.335105), col = "purple", lwd = 2)
plot(density(x), xlim = c(-10, 20))
lines(dnorm(x = seq(from = -10, to = 15, by = 0.1), mean = 4.656921, sd = 3.335105), col = "purple", lwd = 2)
seq(from = -10, to = 15, by = 0.1)
dnorm(x = seq(from = -10, to = 15, by = 0.1), mean = 4.656921, sd = 3.335105)
mean(x)
sd(x)
x
plot(density(x), xlim = c(-10, 20))
lines(density(rnorm(n = 10000, mean = 3.335105, sd = 3.335105)), col = "purple", lty = 2, lwd = 2)
lines(y = dnorm(x = seq(from = -10, to = 15, by = 0.1), mean = 4.656921, sd = 3.335105), x = seq(from = -10, to = 15, by = 0.1), col = "red", lwd = 2)
abline( v = 4.656921)
abline(v = -2.5)
setwd("D:/OneDrive - NTHU/Academic Works/NTHU/Courses/Language and Statistics in R/GitHub/Statistics_in_R/2024/2_Concept")
set.seed(100)
dist.norm = rnorm(100, 50, 5)
dist.skewR = dist.norm ^ 5
dist.skewL = dist.skewR * -1
mean(dist.skewR)
median(dist.skewR)
range(dist.skewR)
set.seed(100)
dist.norm = rnorm(100, 50, 5)
dist.skewR = dist.norm ^ 10
dist.skewL = dist.skewR * -1
median(dist.skewR)
mean(dist.skewR)
range(dist.skewR)
plot(density(dist.skewR))
abline(v = mean(dist.skewR))
abline(v = median(dist.skewR))
mean(dist.skewR) – median(dist.skewR)
mean(dist.skewR) - median(dist.skewR)
mean(dist.skewL)
mean(dist.norm) - median(dist.norm)
mean(dist.skewR) - median(dist.skewR)
median(dist.skewL)
mean(dist.skewL) - median(dist.skewL)
# "main" sets up the title of a plot
plot(density(dist.skewR), main = "Non-Normal Distribution: Right Skewness")
# abline() add a line to an existing figure
# "v" decides the point on the x-axis where a "vertical" line is added
# "col" decides the color of an added line
# "lwd" decides the width of an added line
abline(v = mean(dist.skewR), col = "red", lwd = 1.5)
abline(v = median(dist.skewR), col = "blue", lwd = 1.5)
# "main" sets up the title of a plot
plot(density(dist.skewL), main = "Non-Normal Distribution: Left Skewness")
# abline() add a line to an existing figure
# "v" decides the point on the x-axis where a "vertical" line is added
# "col" decides the color of an added line
# "lwd" decides the width of an added line
abline(v = mean(dist.skewL), col = "red", lwd = 1.5)
abline(v = median(dist.skewL), col = "blue", lwd = 1.5)
dist.skewR.den = density(dist.skewR)
plot(dist.skewR.den, main = "Non-Normal Distribution: Right Skewness")
abline(v = mean(dist.skewR), col = "red", lwd = 1.5)	# For mean
abline(v = median(dist.skewR), col = "blue", lwd = 1.5)	# For median
# For +1 SD. "lty" = line type
abline(v = mean(dist.skewR) + sd(dist.skewR), col = "green", lwd = 1.5, lty = 2)
# For -1 SD. "lty" = line type
abline(v = mean(dist.skewR) - sd(dist.skewR), col = "green", lwd = 1.5, lty = 2)
dist.skewL.den = density(dist.skewL)
plot(dist.skewL.den, main = "Non-Normal Distribution: Left Skewness")
abline(v = mean(dist.skewL), col = "red", lwd = 1.5)	# For mean
abline(v = median(dist.skewL), col = "blue", lwd = 1.5)	# For median
# For +1 SD. "lty" = line type
abline(v = mean(dist.skewL) + sd(dist.skewL), col = "green", lwd = 1.5, lty = 2)
# For -1 SD. "lty" = line type
abline(v = mean(dist.skewL) - sd(dist.skewL), col = "green", lwd = 1.5, lty = 2)
qqnorm(dist.skewR, main = "Non-Normal Q-Q Plot: Right Skewness")
qqline(dist.skewR, col = "red")
qqnorm(dist.skewL, main = "Non-Normal Q-Q Plot: Left Skewness")
qqline(dist.skewL, col = "red")

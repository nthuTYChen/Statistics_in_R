ylab = "Duration (s)") + theme_bw()
?geom_jitter
ggplot(data = durationsOnt, aes(x = Sex, y = DurationOfPrefix)) +
# geom_boxplot() is used to generate the boxplot, and geom_jitter() is used to
# plot individual data points without overlap (cf. geom_point()). Because
# the data points are added later, they will be plotted over the boxplot, so
# we set the "alpha" parameter to make the data points half-transparent.
geom_boxplot() + geom_jitter(color = "white", size = 1.5) +
labs(title = "ont- Prefix Duration by Gender", xlab = "Gender",
ylab = "Duration (s)") + theme_bw()
ggplot(data = durationsOnt, aes(x = Sex, y = DurationOfPrefix)) +
# geom_boxplot() is used to generate the boxplot, and geom_jitter() is used to
# plot individual data points without overlap (cf. geom_point()). Because
# the data points are added later, they will be plotted over the boxplot, so
# we set the "alpha" parameter to make the data points half-transparent.
geom_boxplot() + geom_jitter(color = "white", alpha = 0.7, size = 3) +
labs(title = "ont- Prefix Duration by Gender", xlab = "Gender",
ylab = "Duration (s)") + theme_bw()
ggplot(data = durationsOnt, aes(x = Sex, y = DurationOfPrefix)) +
# geom_boxplot() is used to generate the boxplot, and geom_jitter() is used to
# plot individual data points without overlap (cf. geom_point()). Because
# the data points are added later, they will be plotted over the boxplot, so
# we set the "alpha" parameter to make the data points half-transparent.
geom_boxplot() + geom_jitter(color = "red", alpha = 0.7, size = 3) +
labs(title = "ont- Prefix Duration by Gender", xlab = "Gender",
ylab = "Duration (s)") + theme_bw()
ggplot(data = durationsOnt, aes(x = Sex, y = DurationOfPrefix)) +
# geom_boxplot() is used to generate the boxplot, and geom_jitter() is used to
# plot individual data points without overlap (cf. geom_point()). Because
# the data points are added later, they will be plotted over the boxplot, so
# we set the "alpha" parameter to make the data points half-transparent.
geom_boxplot() + geom_jitter(color = "red", alpha = 0.7, size = 3) +
scale_y_continuous(limits = c(0, 0.3)) +
labs(title = "ont- Prefix Duration by Gender", xlab = "Gender",
ylab = "Duration (s)") + theme_bw()
ggplot(data = durationsOnt, aes(x = Sex, y = DurationOfPrefix)) +
# geom_boxplot() is used to generate the boxplot, and geom_jitter() is used to
# plot individual data points without overlap (cf. geom_point()). Because
# the data points are added later, they will be plotted over the boxplot, so
# we set the "alpha" parameter to make the data points half-transparent.
geom_boxplot() + geom_jitter(color = "red", alpha = 0.7, size = 3) +
scale_y_continuous(limits = c(0, 0.3)) +
labs(title = "ont- Prefix Duration by Gender", x = "Gender",
y = "Duration (s)") + theme_bw()
?geom_jitter
ggplot(data = durationsOnt, aes(x = Sex, y = DurationOfPrefix)) +
# geom_boxplot() is used to generate the boxplot, and geom_jitter() is used to
# plot individual data points without overlap (cf. geom_point()). Because
# the data points are added later, they will be plotted over the boxplot, so
# we set the "alpha" parameter to make the data points half-transparent.
geom_boxplot() + geom_jitter(color = "red", alpha = 0.7, size = 3, position = position_jitterdodge()) +
scale_y_continuous(limits = c(0, 0.3)) +
labs(title = "ont- Prefix Duration by Gender", x = "Gender",
y = "Duration (s)") + theme_bw()
ggplot(data = durationsOnt, aes(x = Sex, y = DurationOfPrefix)) +
# geom_boxplot() is used to generate the boxplot, and geom_jitter() is used to
# plot individual data points without overlap (cf. geom_point()). Because
# the data points are added later, they will be plotted over the boxplot, so
# we set the "alpha" parameter to make the data points half-transparent.
geom_boxplot() + geom_point(color = "red", alpha = 0.7, size = 3, position = position_jitterdodge()) +
scale_y_continuous(limits = c(0, 0.3)) +
labs(title = "ont- Prefix Duration by Gender", x = "Gender",
y = "Duration (s)") + theme_bw()
ggplot(data = durationsOnt, aes(x = Sex, y = DurationOfPrefix)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Because the data points are added later, they will be plotted over the
# boxplot, so we set the "alpha" parameter to make the data points
# half-transparent.
geom_point(color = "red", alpha = 0.7, size = 3, position =
position_jitterdodge()) +
scale_y_continuous(limits = c(0, 0.3)) +
labs(title = "ont- Prefix Duration by Gender", x = "Gender",
y = "Duration (s)") + theme_bw()
?position_jitterdodge
dsub <- diamonds[sample(nrow(diamonds), 1000), ]
ggplot(dsub, aes(x = cut, y = carat, fill = clarity)) +
geom_boxplot(outlier.size = 0) +
geom_point(pch = 21, position = position_jitterdodge())
# Same settings at the beginning
ggplot(data = durationsOnt, aes(x = Sex, y = DurationOfPrefix)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Because the data points are added later, they will be plotted over the
# boxplot, so we set the "alpha" parameter to make the data points
# half-transparent.
geom_point(aes(fill = Sex), alpha = 0.7, size = 3, position =
position_jitterdodge()) +
scale_y_continuous(limits = c(0, 0.3)) +
labs(title = "ont- Prefix Duration by Gender", x = "Gender",
y = "Duration (s)") + theme_bw()
ggplot(data = durationsOnt, aes(x = Sex, y = DurationOfPrefix)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Because the data points are added later, they will be plotted over the
# boxplot, so we set the "alpha" parameter to make the data points
# half-transparent.
geom_point(aes(color = Sex), alpha = 0.7, size = 3, position =
position_jitterdodge()) +
scale_y_continuous(limits = c(0, 0.3)) +
labs(title = "ont- Prefix Duration by Gender", x = "Gender",
y = "Duration (s)") + theme_bw()
?labs
?legend
?theme
# Same settings at the beginning
ggplot(data = durationsOnt, aes(x = Sex, y = DurationOfPrefix)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Because the data points are added later, they will be plotted over the
# boxplot, so we set the "alpha" parameter to make the data points
# half-transparent.
geom_point(aes(color = Sex), alpha = 0.7, size = 3, position =
position_jitterdodge()) +
scale_y_continuous(limits = c(0, 0.3)) +
labs(title = "ont- Prefix Duration by Gender", x = "Gender",
y = "Duration (s)") + guides(color = NULL) + theme_bw()
# Same settings at the beginning
ggplot(data = durationsOnt, aes(x = Sex, y = DurationOfPrefix)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Because the data points are added later, they will be plotted over the
# boxplot, so we set the "alpha" parameter to make the data points
# half-transparent.
geom_point(aes(color = Sex), alpha = 0.7, size = 3, position =
position_jitterdodge()) +
scale_y_continuous(limits = c(0, 0.3)) +
labs(title = "ont- Prefix Duration by Gender", x = "Gender",
y = "Duration (s)") + guides(color = FALSE) + theme_bw()
# Same settings at the beginning
ggplot(data = durationsOnt, aes(x = Sex, y = DurationOfPrefix)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Because the data points are added later, they will be plotted over the
# boxplot, so we set the "alpha" parameter to make the data points
# half-transparent.
geom_point(aes(color = Sex), alpha = 0.7, size = 3, position =
position_jitterdodge()) +
scale_y_continuous(limits = c(0, 0.3)) +
labs(title = "ont- Prefix Duration by Gender", x = "Gender",
y = "Duration (s)") + guides(color = "none") + theme_bw()
?position_dodge
ggplot(data = durationsOnt, aes(x = Sex, y = DurationOfPrefix)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Sex), alpha = 0.7, size = 3,
position = position_jitterdodge()) +
scale_y_continuous(limits = c(0, 0.3)) +
labs(title = "ont- Prefix Duration by Gender",
caption = "Whiskers = IQR * 1.5 from mean",
x = "Gender", y = "Duration (s)") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
head(durationsont)
head(durationsOnt)
ggplot(data = durationsOnt, aes(x = Frequency, y = DurationOfPrefix)) +
geom_point() + facet_grid(~ Sex) +
labs(title = "Correlation between Frequency and ont- Prefix Duration",
caption = "Word frequency per million is log-transformed",
x = "Word Frequency", y = "Duration (s)") + theme_bw()
ggplot(data = durationsOnt, aes(x = Frequency, y = DurationOfPrefix)) +
geom_point(size = 3) + facet_grid(~ Sex) +
scale_y_continuous(limits = c(0, 0.3)) +
labs(title = "Correlation between Frequency and ont- Prefix Duration",
caption = "Word frequency per million is log-transformed",
x = "Word Frequency", y = "Duration (s)") + theme_bw()
labs(title = "Correlation between Frequency and ont- Prefix Duration",
caption = "Word frequency per million is log-transformed",
x = "Word Frequency", y = "Duration (s)") + theme_bw()
ggplot(data = durationsOnt, aes(x = Frequency, y = DurationOfPrefix)) +
geom_point(size = 3, alpha = 0.7) + facet_grid(~ Sex) +
scale_y_continuous(limits = c(0, 0.3)) +
labs(title = "Correlation between Frequency and ont- Prefix Duration",
caption = "Word frequency per million is log-transformed",
x = "Word Frequency", y = "Duration (s)") + theme_bw()
ggplot(data = durationsOnt, aes(x = Frequency, y = DurationOfPrefix)) +
geom_point(color = "grey40", size = 3, alpha = 0.7) + facet_grid(~ Sex) +
scale_y_continuous(limits = c(0, 0.3)) +
labs(title = "Correlation between Frequency and ont- Prefix Duration",
caption = "Word frequency per million is log-transformed",
x = "Word Frequency", y = "Duration (s)") + theme_bw()
?ggsave
test.plot = ggplot(data = durationsOnt, aes(x = Frequency, y = DurationOfPrefix)) +
geom_point(color = "grey40", size = 3, alpha = 0.7) + facet_grid(~ Sex) +
scale_y_continuous(limits = c(0, 0.3)) +
labs(title = "Correlation between Frequency and ont- Prefix Duration",
caption = "Word frequency per million is log-transformed",
x = "Word Frequency", y = "Duration (s)") + theme_bw()
ggsave(filename = "testGGsave.png", plot = test.plot, scale = 0.5, width = 800, height = 450, unit = "px", dpi = 300)
getwd()
ggsave(filename = "testGGsave.png", plot = test.plot, width = 800, height = 450, unit = "px", dpi = 300)
install.packages("Rling", ask = F, dependencies = T)
library(languageR)
?ratings
head(ratings)
?lexdec
head(lexdec)
library(languageR)
# Same settings at the beginning
ggplot(data = durationsOnt, aes(x = Sex, y = DurationOfPrefix)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Sex), alpha = 0.7, size = 3,
position = position_jitterdodge()) +
scale_y_continuous(limits = c(0, 0.3)) +
labs(title = "ont- Prefix Duration by Gender",
caption = "Whiskers = IQR * 1.5 from mean",
x = "Gender", y = "Duration (s)") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
library(ggplot2)
# Same settings at the beginning
ggplot(data = durationsOnt, aes(x = Sex, y = DurationOfPrefix)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Sex), alpha = 0.7, size = 3,
position = position_jitterdodge()) +
scale_y_continuous(limits = c(0, 0.3)) +
labs(title = "ont- Prefix Duration by Gender",
caption = "Whiskers = IQR * 1.5 from mean",
x = "Gender", y = "Duration (s)") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
ggsave("test.png", width = 1200, height = 900, units = "px", scale = 1)
ggsave("test.png", width = 1200, height = 900, units = "px", scale = 0.5)
?ggsave
ggsave("test.png", width = 1800, height = 1350, units = "px")
ggsave("test.png", width = 1200, height = 900, units = "px", dpi = 300)
ggsave("test.png", width = 1200, height = 900, units = "px", dpi = 72)
ggsave("test.png", width = 600, height = 450, units = "px", dpi = 72)
(260 - 300) / 40
(330 - 300) / 40
?z.test
library(languageR)
head(durationsOnt)
shapiro.test((durationsOnt$DurationOfPrefix))
durationsOnt$logFreq = log(durationsOnt$Frequency)
shapiro.test((durationsOnt$logFreq))
sum(is.na(durationsOnt$logFreq))
head(durationsOnt$logFreq)
head(durationsOnt)
shapiro.test((durationsOnt$Frequency))
cor(durationsOnt ~ Frequency, data = durationsOnt)
cor(durationsOnt ~ Frequency, durationsOnt)
cor(durationsOnt$Frequency, durationsOnt$durationsOnt)
cor(durationsOnt$Frequency, durationsOnt$DurationOfPrefix)
durationsOnt$Freq.z = scale(durationsOnt$Frequency)
durationsOnt$Dur.Pref.z = scale(durationsOnt$DurationOfPrefix)
sum(durationsOnt$Freq.z * durationsOnt$Dur.Pref.z) / (nrow(durationsOnt) - 1)
freq.mean = mean(durationsOnt$Frequency)
dur.mean = mean(durationsOnt$DurationOfPrefix)
# Note the sample size is the same for both x and y, so we can derive df from
# either x or y.
df = length(durationsOnt$Frequency) – 1
sum((durationsOnt$Frequency – freq.mean) *
(durationsOnt$DurationOfPrefix – dur.mean)) / df
freq.mean = mean(durationsOnt$Frequency)
dur.mean = mean(durationsOnt$DurationOfPrefix)
# Note the sample size is the same for both x and y, so we can derive df from
# either x or y.
df = length(durationsOnt$Frequency) - 1
sum((durationsOnt$Frequency - freq.mean) *
(durationsOnt$DurationOfPrefix - dur.mean)) / df
cov(durationsOnt$Frequency, durationsOnt$DurationOfPrefix)
durationsOnt$Freq.10x = durationsOnt$Frequency * 10
cov(durationsOnt$Freq.10x, durationsOnt$DurationOfPrefix)
sum(durationsOnt$Frequency - freq.mean)
durationsOnt$Freq.10x = durationsOnt$Frequency * 10
sum(durationsOnt$Freq.10x – mean(durationsOnt$Freq.10x))
durationsOnt$Freq.10x = durationsOnt$Frequency * 10
sum(durationsOnt$Freq.10x - mean(durationsOnt$Freq.10x))
freq.mean
mean(durationsOnt$Freq.10x)
head(durationsOnt$Frequency - freq.mean)
head(durationsOnt$Freq.10x - mean(durationsOnt$Freq.10x))
sum(durationsOnt$Freq.10x - mean(durationsOnt$Freq.10x)
)
mean(durationsOnt$Freq.10x - mean(durationsOnt$Freq.10x)
)
sum(durationsOnt$Frequency - freq.mean)
durationsOnt$Freq.1000 = durationsOnt$Frequency * 10
sum(durationsOnt$Freq.1000 – mean(durationsOnt$Freq.1000))
durationsOnt$Freq.1000 = durationsOnt$Frequency * 10
sum(durationsOnt$Freq.1000 - mean(durationsOnt$Freq.1000))
durationsOnt$Freq.1000 = durationsOnt$Frequency + 1000
sum(durationsOnt$Freq.1000 - mean(durationsOnt$Freq.1000))
durationsOnt$Freq.1000 = durationsOnt$Frequency + 1000
mean(durationsOnt$Freq.1000 - mean(durationsOnt$Freq.1000))
mean(durationsOnt$Frequency - freq.mean)
cov(durationsOnt$Freq.1000, durationsOnt$DurationOfPrefix)
cov(durationsOnt$Frequency, durationsOnt$DurationOfPrefix)
cov(durationsOnt$Freq.10x, durationsOnt$DurationOfPrefix)
cov(durationsOnt$Frequency – freq.mean)
cov(durationsOnt$Frequency - freq.mean)
cov(durationsOnt$Frequency, durationsOnt$DurationOfPrefix)
cov(durationsOnt$Freq.10x, durationsOnt$DurationOfPrefix)
freq.z = scale(durationsOnt$Frequency)
dur.z = scale(durationsOnt$DurationOfPrefix)
# The sample size "n" is the same for paired variables
sum(freq.z * dur.z) / (length(freq.z) - 1)
cor.test(freq.z, dur.z)
cor.test(freq.z, dur.z)$estimate
cor.test(freq.z, dur.z)$estimate^2
r = -0.04927405
n = length(durationsOnt$Frequency)
# x^y = x to the power of y
t = r / (sqrt(1 - r^2) / sqrt(n - 2))
t
p = pt(t, df = n – 2)
p = pt(t, df = n - 2)
p
p * 2
cor.test(x = freq.z, y = dur.z)
library(ggplot2)
poly.df = data.frame(x = seq(-5, 5, length = 50))
poly.df$y = x^2
poly.df$y = poly.df$x^2
head(poly.df)
ggplot(data = poly.df, mapping = aes(x = x, y = y)) +
geom_line(stat = "identity", lwd = 1.5, color = "grey40", alpha = .4) +
labs(title = "Figure 5. Nonlinear x-y- correlation", caption = "Quadratic equation: y = x^2") +
theme_bw()
poly.df = data.frame(x = seq(-5, 5, length = 50))
poly.df$y = poly.df$x^2 - 5
ggplot(data = poly.df, mapping = aes(x = x, y = y)) +
geom_line(stat = "identity", lwd = 1.5, color = "grey40", alpha = .4) +
labs(title = "Figure 5. Nonlinear x-y- correlation", caption = "Quadratic equation: y = x^2 - 5") +
theme_bw()
ggplot(data = poly.df, mapping = aes(x = x, y = y)) +
geom_line(stat = "identity", lwd = 1.5, color = "grey40", alpha = .4) +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Figure 5. Nonlinear x-y- correlation", caption = "Quadratic equation: y = x^2 - 5") +
theme_bw()
ggplot(data = poly.df, mapping = aes(x = x, y = y)) +
geom_line(stat = "identity", lwd = 1.5, color = "grey40", alpha = .4) +
geom_hline(yintercept = 0, color = "red") +
geom_vline(xintercept = 0, color = "blue") +
labs(title = "Figure 5. Nonlinear x-y- correlation", caption = "Quadratic equation: y = x^2 - 5") +
theme_bw()
cor.test(poly.df$x, poly.df$y)
# Figure 6
poly.df = data.frame(x = seq(-5, 5, length = 50))
poly.df$y = poly.df$x^2 - 5
ggplot(data = poly.df, mapping = aes(x = x, y = y)) +
geom_line(stat = "identity", lwd = 1.5, color = "grey40", alpha = .4) +
geom_hline(yintercept = 0, color = "red") +
geom_vline(xintercept = 0, color = "blue") +
labs(title = "Figure 6. Nonlinear x-y- correlation", caption = "Quadratic equation: y = x^2 - 5") +
theme_bw()
ggplot(data = poly.df, mapping = aes(x = x, y = y)) +
geom_line(stat = "identity", lwd = 1.5, color = "grey40", alpha = .4) +
geom_hline(yintercept = 0, color = "red") +
geom_vline(xintercept = 0, color = "blue") +
labs(title = "Figure 6. Nonlinear x-y correlation", caption = "Quadratic equation: y = x^2 - 5") +
theme_bw()
set.seed(1)
cor.outliers = data.frame(x = rnorm(10), y = rnorm(10))
cor.outliers
cor.test(cor.outliers)
cor.test(cor.outliers$x, cor.outliers$y)
cor.outliers = rbind(cor.outliers, data.frame(x = 3, y = 3))
cor.outliers
cor.test(cor.outliers$x, cor.outliers$y)
set.seed(1)
cor.outliers = data.frame(x = rnorm(10), y = rnorm(10))
cor.outliers = rbind(cor.outliers, data.frame(x = c(2,3), y = c(2,3)))
cor.test(cor.outliers$x, cor.outliers$y)
set.seed(2)
cor.outliers = data.frame(x = rnorm(10), y = rnorm(10))
cor.outliers = rbind(cor.outliers, data.frame(x = c(2,3), y = c(2,3)))
cor.test(cor.outliers$x, cor.outliers$y)
head(cor.outliers)
set.seed(1)
cor.outliers = data.frame(x = rnorm(10, 0.5, 0.2), y = rnorm(10, 0.5, 0.2))
cor.outliers = rbind(cor.outliers, data.frame(x = 3, y = 3))
cor.outliers
cor.test(cor.outliers$x, cor.outliers$y)
set.seed(1)
cor.rand = data.frame(x = rnorm(10, 0.5, 0.2), y = rnorm(10, 0.5, 0.2))
cor.outliers = rbind(cor.rand, data.frame(x = 3, y = 3))
cor.test(cor.rand$x, cor.rand$y)
cor.test(cor.outliers$x, cor.outliers$y)
set.seed(1)
cor.rand = data.frame(x = rnorm(10, 0.5, 0.2), y = rnorm(10, 0.5, 0.2))
cor.outliers = rbind(cor.rand, data.frame(x = 3, y = 3))
ggplot(mapping = aes(x = x, y = y)) +
geom_point(data = cor.rand, color = "grey40", alpha = .4) +
geom_point(data = data.frame(x = 3, y = 3), color = "red", alpha = .4) +
labs(title = "Figure 5. An outlier in a correlation test",
caption = "Without the outlier: r = -0.38, p = .28\nWith the outlier: r = 0.93, p < .001") +
theme_bw()
ggplot(mapping = aes(x = x, y = y)) +
geom_point(data = cor.rand, size = 2, color = "grey40", alpha = .4) +
geom_point(data = data.frame(x = 3, y = 3), size = 2, color = "red", alpha = .4) +
labs(title = "Figure 5. An outlier in a correlation test",
caption = "Without the outlier: r = -0.38, p = .28\nWith the outlier: r = 0.93, p < .001") +
theme_bw()
homo.sced = data.frame(x = seq(-2, 2, length = 100), y = seq(-2, 2, length = -100))
homo.sced = data.frame(x = seq(-2, 2, length = 100), y = seq(-2, 2, length = 100))
?seq
seq(1, 100, by = 2)
home.sced[seq(1, 100, by = 2),]$y = home.sced[seq(1, 100, by = 2),]$y + home.sced[seq(1, 100, by = 2),]$y * 0.1
homo.sced = data.frame(x = seq(-2, 2, length = 100), y = seq(-2, 2, length = 100))
home.sced[seq(1, 100, by = 2),]$y = home.sced[seq(1, 100, by = 2),]$y + seq(1, 100, by = 2) * 0.1
home.sced = data.frame(x = seq(-2, 2, length = 100), y = seq(-2, 2, length = 100))
home.sced[seq(1, 100, by = 2),]$y = home.sced[seq(1, 100, by = 2),]$y + seq(1, 100, by = 2) * 0.1
head(home.sced)
ggplot(data = home.sced, mapping = aes(x = x, y = y)) +
geom_point(size = 2, color = "grey40", alpha = 0.4) +
labs(title = "Figure 7. Violation of homoscedasticity") +
theme_bw()
setwd("D:/OneDrive/Documents/Academic Works/NTHU/Courses/Language and Statistics in R/GitHub/Statistics_in_R/Week5-7")
overgeneralization = data.frame(Subj = 1:30, Error_2 = round(rnorm(30, 20, 5), 0), Error_3 = round(rnorm(30, 15, 5), 0))
t.test(overgeneralization$Error_2, overgeneralization$Error_3)
t.test(overgeneralization$Error_2, overgeneralization$Error_3, paired = T)
overgen = data.frame(Subj = 1:30, Error_2 = round(rnorm(30, 20, 5), 0), Error_3 = round(rnorm(30, 18, 5), 0))
t.test(overgen$Error_2, overgen$Error_3, paired = T)
t.test(overgen$Error_2, overgen$Error_3, paired = F)
overgen = data.frame(Subj = 1:30, Error_2 = round(rnorm(30, 20, 5), 0), Error_3 = round(rnorm(30, 18, 5), 0))
t.test(overgen$Error_2, overgen$Error_3, paired = F)
t.test(overgen$Error_2, overgen$Error_3, paired = T)
overgen = data.frame(Subj = 1:30, Error_2 = round(rnorm(30, 20, 5), 0), Error_3 = round(rnorm(30, 19, 5), 0))
t.test(overgen$Error_2, overgen$Error_3, paired = T)
t.test(overgen$Error_2, overgen$Error_3, unpaired = T)
overgen$Error_3.x = overgen$Error_3 - 1
t.test(overgen$Error_2, overgen$Error_3.x, unpaired = T)
t.test(overgen$Error_2, overgen$Error_3.x, paired = T)
t.test(overgen$Error_2, overgen$Error_3.x, paired = F)
overgen = data.frame(Subj = 1:30, Error_2 = round(rnorm(30, 20, 5), 0), Error_3 = round(rnorm(30, 19, 5), 0))
t.test(overgen$Error_2, overgen$Error_3, paired = F)
overgen = data.frame(Subj = 1:30, Error_2 = round(rnorm(30, 20, 5), 0), Error_3 = round(rnorm(30, 19, 5), 0))
t.test(overgen$Error_2, overgen$Error_3, paired = F)
overgen = data.frame(Subj = 1:30, Error_2 = round(rnorm(30, 20, 5), 0), Error_3 = round(rnorm(30, 19, 5), 0))
t.test(overgen$Error_2, overgen$Error_3, paired = F)
overgen = data.frame(Subj = 1:30, Error_2 = round(rnorm(30, 20, 5), 0), Error_3 = round(rnorm(30, 19, 5), 0))
t.test(overgen$Error_2, overgen$Error_3, paired = F)
overgen = data.frame(Subj = 1:30, Error_2 = round(rnorm(30, 20, 5), 0), Error_3 = round(rnorm(30, 18, 5), 0))
t.test(overgen$Error_2, overgen$Error_3, paired = F)
overgen = data.frame(Subj = 1:30, Error_2 = round(rnorm(30, 20, 5), 0), Error_3 = round(rnorm(30, 18, 5), 0))
t.test(overgen$Error_2, overgen$Error_3, paired = F)
overgen = data.frame(Subj = 1:30, Error_2 = round(rnorm(30, 20, 5), 0), Error_3 = round(rnorm(30, 18, 5), 0))
t.test(overgen$Error_2, overgen$Error_3, paired = F)
overgen = data.frame(Subj = 1:30, Error_2 = round(rnorm(30, 20, 5), 0), Error_3 = round(rnorm(30, 18, 5), 0))
t.test(overgen$Error_2, overgen$Error_3, paired = F)
overgen = data.frame(Subj = 1:30, Error_2 = round(rnorm(30, 20, 5), 0), Error_3 = round(rnorm(30, 18, 5), 0))
t.test(overgen$Error_2, overgen$Error_3, paired = F)
t.test(overgen$Error_2, overgen$Error_3, paired = T)
overgen$Error_3.x = overgen$Error_3 + 1
t.test(overgen$Error_2, overgen$Error_3.x, paired = T)
t.test(overgen$Error_2, overgen$Error_3.x, paired = F)
t.test(overgen$Error_2, overgen$Error_3, paired = T)
overgen = data.frame(Subj = 1:30, Error_2 = round(rnorm(30, 20, 5), 0), Error_3 = round(rnorm(30, 17, 5), 0))
t.test(overgen$Error_2, overgen$Error_3, paired = T)
t.test(overgen$Error_2, overgen$Error_3, paired = F)
overgen = data.frame(Subj = 1:30, Error_2 = round(rnorm(30, 20, 5), 0), Error_3 = round(rnorm(30, 17, 5), 0))
t.test(overgen$Error_2, overgen$Error_3, paired = F)
t.test(overgen$Error_2, overgen$Error_3, paired = T)
overgen$Error_3.x = overgen$Error_3 + 1
t.test(overgen$Error_2, overgen$Error_3.x, paired = T)
overgen = data.frame(Subj = 1:30, Error_2 = round(rnorm(30, 20, 5), 0), Error_3 = round(rnorm(30, 17, 5), 0))
t.test(overgen$Error_2, overgen$Error_3, paired = T)
t.test(overgen$Error_2, overgen$Error_3, paired = F)
write.csv(overgen, file = "overgen.csv", fileEncoding = "UTF-8")
resourcesURL = "https://lngproc.fl.nthu.edu.tw/statisticsR/Week5-7/"

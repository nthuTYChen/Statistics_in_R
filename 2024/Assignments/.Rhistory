jabberwocky.all[jabberwocky.all$Word == 'toves',]
xtabs(formula = Count ~ Real, data = jabberwocky.all)
xtabs(formula = ~ Real, data = jabberwocky.all)
xtabs(formula = ~ Real + Cat, data = jabberwocky.all)
jabberwocky.wd = loadCourseCSV(2024, "3_Data", "jabberwocky_words.txt")
jabberwocky.table = table(jabberwocky.wd$Word)
jabberwocky.table =
jabberwocky.table[order(jabberwocky.table, decreasing = T)]
jabberwocky.table.2 = jabberwocky.table[jabberwocky.table > 1]
barplot(height = jabberwocky.table.2,
main = "Jabberwocky Word Count (Token Freq > 1)",
xlab = "", ylab = "Count", ylim = c(0, 20), las = 2)
jabberwocky.df = as.data.frame(jabberwocky.table)
colnames(jabberwocky.df) = c("Word", "Count")
jabberwocky.wordCat =
loadCourseCSV(2024, "3_Data", "jabberwocky_words_cat.csv")
jabberwocky.all = merge(jabberwocky.df, jabberwocky.wordCat, by = "Word")
# Get the contingency table of word type count
jabberwocky.xtabs = xtabs(~ Real + Cat, jabberwocky.all)
jabberwocky.xtabs
jabberwocky.all[jabberwocky.all$Cat == 'verb',]
jabberwocky.wd = loadCourseCSV(2024, "3_Data", "jabberwocky_words.txt")
jabberwocky.table = table(jabberwocky.wd$Word)
jabberwocky.df = as.data.frame(jabberwocky.table)
colnames(jabberwocky.df) = c("Word", "Count")
jabberwocky.df[jabberwocky.df$Word == 'toves',]
count.des.ord = order(jabberwocky.df$Count, decreasing = T)
# Save the reordered data frame to jabberwocky.ord
jabberwocky.ord = jabberwocky.df[count.des.ord,]
jabberwocky.ord[jabberwocky.ord$Word == 'toves',]
jabberwocky.wordCat =
loadCourseCSV(2024, "3_Data", "jabberwocky_words_cat.csv")
jabberwocky.all = merge(jabberwocky.ord, jabberwocky.wordCat, by = "Word")
jabberwocky.wd = loadCourseCSV(2024, "3_Data", "jabberwocky_words.txt")
jabberwocky.table = table(jabberwocky.wd$Word)
jabberwocky.table =
jabberwocky.table[order(jabberwocky.table, decreasing = T)]
jabberwocky.table.2 = jabberwocky.table[jabberwocky.table > 1]
barplot(height = jabberwocky.table.2,
main = "Jabberwocky Word Count (Token Freq > 1)",
xlab = "", ylab = "Count", ylim = c(0, 20), las = 2)
jabberwocky.df = as.data.frame(jabberwocky.table)
colnames(jabberwocky.df) = c("Word", "Count")
jabberwocky.wordCat =
loadCourseCSV(2024, "3_Data", "jabberwocky_words_cat.csv")
jabberwocky.all = merge(jabberwocky.df, jabberwocky.wordCat, by = "Word")
# Get the contingency table of word type count
jabberwocky.xtabs = xtabs(~ Real + Cat, jabberwocky.all)
jabberwocky.xtabs
jabberwocky.all[jabberwocky.all$Cat == 'verb',]
jabberwocky.wd = loadCourseCSV(2024, "3_Data", "jabberwocky_words.txt")
jabberwocky.table = table(jabberwocky.wd$Word)
jabberwocky.df = as.data.frame(jabberwocky.table)
colnames(jabberwocky.df) = c("Word", "Count")
jabberwocky.df[jabberwocky.df$Word == 'toves',]
count.des.ord = order(jabberwocky.df$Count, decreasing = T)
# Save the reordered data frame to jabberwocky.ord
jabberwocky.ord = jabberwocky.df[count.des.ord,]
jabberwocky.ord[jabberwocky.ord$Word == 'toves',]
jabberwocky.wordCat =
loadCourseCSV(2024, "3_Data", "jabberwocky_words_cat.csv")
jabberwocky.all = merge(jabberwocky.ord, jabberwocky.wordCat, by = "Word")
xtabs(formula = ~ Real + Cat, data = jabberwocky.all)
jabberwocky.wd = loadCourseCSV(2024, "3_Data", "jabberwocky_words.txt")
jabberwocky.table = table(jabberwocky.wd$Word)
jabberwocky.table =
jabberwocky.table[order(jabberwocky.table, decreasing = T)]
jabberwocky.table.2 = jabberwocky.table[jabberwocky.table > 1]
jabberwocky.df = as.data.frame(jabberwocky.table)
colnames(jabberwocky.df) = c("Word", "Count")
jabberwocky.wordCat =
loadCourseCSV(2024, "3_Data", "jabberwocky_words_cat.csv")
jabberwocky.all = merge(jabberwocky.df, jabberwocky.wordCat, by = "Word")
# Get the contingency table of word type count
jabberwocky.xtabs = xtabs(~ Real + Cat, jabberwocky.all)
jabberwocky.xtabs
mosaicplot(x = jabberwocky.xtabs, main = "Jabberwocky Word Types Distribution",
xlab = "Real Word", ylab = "Word Category",
color = c("white", "grey40"))
?rnorm
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mu = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:100) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(abs(M - 300) >= 40)
}
for(n in 1:100) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 40 higher/lower than mu
print(M)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
for(n in 1:10) {						# Ten loops
sample = rnorm(n = 10, mean = 300, sd = 40)	# Get our sample
M = mean(sample)					# Calculate sample mean
# Check if a sample mean is at least 20 higher/lower than mu
print(abs(M - 300) >= 20)
}
t.upper = (320 - 300) / (40 / sqrt(10))
# pt() acts like pnorm(), except that you need to input the df info.
p.upper = pt(q = t.upper, df = 10 - 1, lower.tail = FALSE)
p.upper * 2	# Two-tailed p-value
t.upper = (325 - 300) / (40 / sqrt(10))
# pt() acts like pnorm(), except that you need to input the df info.
p.upper = pt(q = t.upper, df = 10 - 1, lower.tail = FALSE)
p.upper * 2	# Two-tailed p-value
library(languageR)
r = -0.04927405
n = length(durationsOnt$Frequency)
# x^y = x to the power of y
t = r / (sqrt(1 - r^2) / sqrt(n - 2))
t
[1] -0.4933398
p = pt(t, df = n - 2)
p
p * 2
# Use scale() to convert a sample into z-scores
freq.z = scale(durationsOnt$Frequency)
dur.z = scale(durationsOnt$DurationOfPrefix)
cor.test(x = freq.z, y = dur.z)
Myers.clean = loadCourseCSV(2024, "4_Parametric", "MyersClean.csv")
source("https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/courseUtil.R")
# The "clean" data set
Myers.clean = loadCourseCSV(2024, "4_Parametric", "MyersClean.csv")
source("https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/courseUtil.R")
overgen = loadCourseCSV(2024, "4_Parametric ", "overgen.csv")
overgen = loadCourseCSV(2024, "4_Parametric", "overgen.csv")
sl.sim = loadCourseCSV(2024, "5_ANOVA", "SaitoLysterSim.csv")
sl.rep.sim = loadCourseCSV(2024, "5_ANOVA", "SaitoLysterRepSim.csv")
chen.sample = loadCourseCSV(2024, "5_ANOVA", "Chen2020Sample.csv")
source("https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/courseUtil.R")
log(1)
chen.sample = loadCourseCSV(2024, "6_Regression", "Chen2020Sample.csv")
Myers.clean = loadCourseCSV(2024, "7_Nonparametric", "MyersClean.csv")
chen.sample = loadCourseCSV(2024, "6_Regression", "Chen2020Sample.csv")
# Set a random seed
set.seed(999)
# Create a population vector with 50000 "like"s and 50000 "unlike"s
population = c(rep("Like", 50000), rep("Unlike", 50000))
sampleN = 13952
targetHits = 3333
sample.count = 0	# Use as a counter to record the number of target samples
# Repeat the same process for 100 times
for(i in 1:100) {
testSample = sample(population, sampleN)
# == convert the testSample vector into a boolean vector
# sum() gives the number of TRUE in the vector
hitsN = sum(testSample == "Like")
# So we can check the number of hits for each sample
print(hitsN)
# Check if the number of hits <= targetHits
if(hitsN <= targetHits) {
# If TRUE, add 1 to sample.count
sample.count = sample.count + 1
}
}
# Still very unlikely
sample.count
vocab.thao.mand = loadCourseCSV(2024, "7_Nonparametric", "vocabThaoMand.csv")
wilcox.test(formula = Vocab ~ Group, data = vocab.thao.mand)
vocab.thao.mand
resourcesURL =
"https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/2024/1_Intro/"
df = read.csv(paste(resourcesURL, "dummyDataFrame.csv", sep = ""))
df
# Preparation works
library(languageR)
head(verbs)
# 1-1: Use 6:11 for a vector of sequential numbers from 6 to 11, and use
#      this vector to retrieve the corresponding LengthOfTheme values from "verbs"
rows = 6:11
verbs[rows, ]$LengthOfTheme
head(verbs[2])
lastRow = nrow(verbs)
lastRow
firstRow = lastRow - 10
firstRow
verbs[893:903,]$LengthOfTheme
verbs[firstRow:lastRow,]$LengthOfTheme
fiveLengths = verbs[1:5,]$LengthOfTheme
mean(fiveLengths)
LengthDifference(10, 18)
LengthDifference = function(row1, row2) {
# Get the first length value based on row1
length1 = verbs[row1,]$LengthOfTheme
# Get the second length value based on row2
length2 = verbs[row2,]$LengthOfTheme
# Calculate the difference between the two
diff = length1 - length2
# Print out the difference
print(diff)
}
# Test the function by sending different row numbers
LengthDifference(10, 18)
LengthDifference(301, 25)
source("https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/202
4/1_Introduction/replicate.R")
source("https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/2024/1_Introduction/replicate.R")
source("https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/2024/1_Intro/replicate.R")
dir()
wd()
setwd()
getwd()
# Preparation works
library(languageR)
head(verbs)
# 1-1: Use 10:12 for a vector of sequential numbers from 10 to 12, and use
#      this vector to retrieve the corresponding LengthOfTheme values from "verbs"
rows = 10:12
verbs[rows, ]$LengthOfTheme
seqs = c(6:10, 1:20, 55:57)
head(seqs)
verbs[seqs,]
verbs[seqs,]$Verb
verbs[2]
head(verbs)
verbs[1:6,]$Verb
setwd("D:/OneDrive - NTHU/Academic Works/NTHU/Courses/Language and Statistics in R/GitHub/Statistics_in_R/2024/Assignments")
source("https://raw.githubusercontent.com/nthuTYChen/Statistics_in_R/main/2024/2_Concept/distExamples.R")
dist.norm.den = density(dist.norm)
head(dist.norm.den)
xtabs(dist.norm.den)
xtabs(dist.norm.den$x)
table(dist.norm.den$x)

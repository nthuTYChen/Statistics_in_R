# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
# Same settings at the beginning
ggplot(data = Myers.resp, aes(x = logRT, y = Session)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Session), alpha = 0.7, size = 3,
position = position_jitterdodge()) +
scale_y_continuous(limits = c(0, 0.3)) +
labs(title = "Wordlikeness Judgment Latency",
caption = "Whiskers = IQR * 1.5 from 1st/3rd quartile",
x = "Session", y = "log-transformed Reaction Time") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
# Same settings at the beginning
ggplot(data = Myers.resp, aes(x = logRT, y = Session)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Session), alpha = 0.7, size = 3,
position = position_jitterdodge()) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Wordlikeness Judgment Latency",
caption = "Whiskers = IQR * 1.5 from 1st/3rd quartile",
x = "Session", y = "log-transformed Reaction Time") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
# Same settings at the beginning
ggplot(data = Myers.resp, aes(x = logRT, y = factor(Session))) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = factor(Session)), alpha = 0.7, size = 3,
position = position_jitterdodge()) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Wordlikeness Judgment Latency",
caption = "Whiskers = IQR * 1.5 from 1st/3rd quartile",
x = "Session", y = "log-transformed Reaction Time") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
Myers.resp$Session = as.factor(Myers.resp)
Myers.sample = read.csv(paste(sourceURL, "Myers_2015_Sample.csv", sep = ""),
fileEncoding = "UTF-8-BOM")
Myers.resp = subset(Myers.sample, RT > 0)
Myers.resp$logRT = log(Myers.resp$RT)
Myers.resp$Session.fac = as.factor(Myers.resp$Session)
Myers.resp$Session.fac = as.factor(Myers.resp$Session)
# Same settings at the beginning
ggplot(data = Myers.resp, aes(x = logRT, y = Session.fac)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Session.fac), alpha = 0.7, size = 3,
position = position_jitterdodge()) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Wordlikeness Judgment Latency",
caption = "Whiskers = IQR * 1.5 from 1st/3rd quartile",
x = "Session", y = "log-transformed Reaction Time") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
# continuous
Myers.resp$Session.fac = as.factor(Myers.resp$Session)
# Same settings at the beginning
ggplot(data = Myers.resp, aes(x = Session.fac, y = logRT)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Session.fac), alpha = 0.7, size = 3,
position = position_jitterdodge()) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Wordlikeness Judgment Latency",
caption = "Whiskers = IQR * 1.5 from 1st/3rd quartile",
x = "Session", y = "log-transformed Reaction Time") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
# continuous
Myers.resp$Session.fac = as.factor(Myers.resp$Session)
# Same settings at the beginning
ggplot(data = Myers.resp, aes(x = Session, y = logRT)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Session), alpha = 0.7, size = 3,
position = position_jitterdodge()) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Wordlikeness Judgment Latency",
caption = "Whiskers = IQR * 1.5 from 1st/3rd quartile",
x = "Session", y = "log-transformed Reaction Time") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
# continuous
Myers.resp$Session.fac = as.factor(Myers.resp$Session)
# Same settings at the beginning
ggplot(data = Myers.resp, aes(x = Session.fac, y = logRT)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Session.fac), alpha = 0.7, size = 3,
position = position_jitterdodge()) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Wordlikeness Judgment Latency",
caption = "Whiskers = IQR * 1.5 from 1st/3rd quartile",
x = "Session", y = "log-transformed Reaction Time") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
# Convert "Session" into a factor, so ggplot2 wonâ€™t treat the variable as
# continuous
Myers.resp$Session.fac = as.factor(Myers.resp$Session)
# Same settings at the beginning
ggplot(data = Myers.resp, aes(x = Session.fac, y = logRT)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Session.fac), alpha = 0.7, size = 3,
position = position_jitterdodge(width = 0.5)) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Wordlikeness Judgment Latency",
caption = "Whiskers = IQR * 1.5 from 1st/3rd quartile",
x = "Session", y = "log-transformed Reaction Time") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
?position_jitterdodge
# Convert "Session" into a factor, so ggplot2 wonâ€™t treat the variable as
# continuous
Myers.resp$Session.fac = as.factor(Myers.resp$Session)
# Same settings at the beginning
ggplot(data = Myers.resp, aes(x = Session.fac, y = logRT)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Session.fac), alpha = 0.7, size = 3,
position = position_jitterdodge(jitterwidth = 0.5)) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Wordlikeness Judgment Latency",
caption = "Whiskers = IQR * 1.5 from 1st/3rd quartile",
x = "Session", y = "log-transformed Reaction Time") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
# Convert "Session" into a factor, so ggplot2 wonâ€™t treat the variable as
# continuous
Myers.resp$Session.fac = as.factor(Myers.resp$Session)
# Same settings at the beginning
ggplot(data = Myers.resp, aes(x = Session.fac, y = logRT)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Session.fac), alpha = 0.7, size = 3,
position = position_jitterdodge(jitter.width = 0.5)) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Wordlikeness Judgment Latency",
caption = "Whiskers = IQR * 1.5 from 1st/3rd quartile",
x = "Session", y = "log-transformed Reaction Time") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
# Convert "Session" into a factor, so ggplot2 wonâ€™t treat the variable as
# continuous
Myers.resp$Session.fac = as.factor(Myers.resp$Session)
# Same settings at the beginning
ggplot(data = Myers.resp, aes(x = Session.fac, y = logRT)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Session.fac), alpha = 0.7, size = 3,
position = position_jitterdodge(jitter.width = 1)) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Wordlikeness Judgment Latency",
caption = "Whiskers = IQR * 1.5 from 1st/3rd quartile",
x = "Session", y = "log-transformed Reaction Time") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
# Convert "Session" into a factor, so ggplot2 wonâ€™t treat the variable as
# continuous
Myers.resp$Session.fac = as.factor(Myers.resp$Session)
# Same settings at the beginning
ggplot(data = Myers.resp, aes(x = Session.fac, y = logRT)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.size" is set to zero to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.size = 0) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Session.fac), alpha = 0.2, size = 3,
position = position_jitterdodge(jitter.width = 1)) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Wordlikeness Judgment Latency",
caption = "Whiskers = IQR * 1.5 from 1st/3rd quartile",
x = "Session", y = "log-transformed Reaction Time") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
?geom_boxplot
# Convert "Session" into a factor, so ggplot2 wonâ€™t treat the variable as
# continuous
Myers.resp$Session.fac = as.factor(Myers.resp$Session)
# Same settings at the beginning
ggplot(data = Myers.resp, aes(x = Session.fac, y = logRT)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.shape" is set to NA to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.shape = NA) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Session.fac), alpha = 0.1, size = 3,
position = position_jitterdodge(width = 1)) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Wordlikeness Judgment Latency",
caption = "Whiskers = IQR * 1.5 from 1st/3rd quartile",
x = "Session", y = "log-transformed Reaction Time") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
# Convert "Session" into a factor, so ggplot2 wonâ€™t treat the variable as
# continuous
Myers.resp$Session.fac = as.factor(Myers.resp$Session)
# Same settings at the beginning
ggplot(data = Myers.resp, aes(x = Session.fac, y = logRT)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.shape" is set to NA to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.shape = NA) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Session.fac), alpha = 0.1, size = 3,
position = position_jitterdodge(jitter.width = 1)) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Wordlikeness Judgment Latency",
caption = "Whiskers = IQR * 1.5 from 1st/3rd quartile",
x = "Session", y = "log-transformed Reaction Time") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
# Convert "Session" into a factor, so ggplot2 wonâ€™t treat the variable as
# continuous
Myers.resp$Session.fac = as.factor(Myers.resp$Session)
# Same settings at the beginning
ggplot(data = Myers.resp, aes(x = Session.fac, y = logRT)) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Session.fac), alpha = 0.1, size = 3,
position = position_jitterdodge(jitter.width = 1)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.shape" is set to NA to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.shape = NA) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Wordlikeness Judgment Latency",
caption = "Whiskers = IQR * 1.5 from 1st/3rd quartile",
x = "Session", y = "log-transformed Reaction Time") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
# Convert "Session" into a factor, so ggplot2 wonâ€™t treat the variable as
# continuous
Myers.resp$Session.fac = as.factor(Myers.resp$Session)
# Same settings at the beginning
ggplot(data = Myers.resp, aes(x = Session.fac, y = logRT)) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Session.fac), alpha = 0.1, size = 3,
position = position_jitterdodge(jitter.width = 1)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.shape" is set to NA to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.shape = NA, alpha = 0.7) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Wordlikeness Judgment Latency",
caption = "Whiskers = IQR * 1.5 from 1st/3rd quartile",
x = "Session", y = "log-transformed Reaction Time") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = NULL) + theme_bw()
# Convert "Session" into a factor, so ggplot2 wonâ€™t treat the variable as
# continuous
Myers.resp$Session.fac = as.factor(Myers.resp$Session)
# Same settings at the beginning
ggplot(data = Myers.resp, aes(x = Session.fac, y = logRT)) +
# Color mapping is done within geom_point(), so the mapping does not affect
# geom_boxplot(). Because the data points are added later, they will be plotted
# over the boxplot, so we set the "alpha" parameter to make the data points
# half-transparent. Finally, "position" is set to use the position_jitterdoge()
# function so the individual points do not overlap but still aligned within
# each group.
geom_point(aes(color = Session.fac), alpha = 0.1, size = 3,
position = position_jitterdodge(jitter.width = 1)) +
# geom_boxplot() is used to generate the boxplot, and geom_point() is used to
# plot individual data points.
# For geom_boxplot(), "outlier.shape" is set to NA to avoid showing outliers
# since we already decide to plot individual points.
geom_boxplot(outlier.shape = NA, alpha = 0.7) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Wordlikeness Judgment Latency",
caption = "Whiskers = IQR * 1.5 from 1st/3rd quartile",
x = "Session", y = "log-transformed Reaction Time") +
# Use guides() to turn off the legend for color mapping since the x-axis
# is just enough.
guides(color = "none") + theme_bw()
boxplot.stats(logRT ~ Session, data = Myers.resp)
?boxplot.stats
boxplot.stats(Myers.resp[Myers.resp$Session == 1,]$logRT)$outlier
boxplot.stats(Myers.resp[Myers.resp$Session == 1,]$logRT)
set.seed(1)
norm = data.frame(Values=dnorm(seq(-3, 3, length=150), 0, 1))
norm$z = seq(-3, 3, length=150)
set.seed(15)
sample.10 = data.frame(z = rnorm(5), SampleN = "Sample N = 10", Speaker = rep("Native", 5))
sample.10 = rbind(sample.10, data.frame(z = rnorm(5), SampleN = "Sample N = 10", Speaker = rep("Nonnative", 5)))
set.seed(15)
sample.30 = data.frame(z = rnorm(15), SampleN = "Sample N = 30", Speaker = rep("Native", 15))
sample.30 = rbind(sample.30, data.frame(z = rnorm(15), SampleN = "Sample N = 30", Speaker = rep("Nonnative", 15)))
set.seed(15)
sample.80 = data.frame(z = rnorm(40), SampleN = "Sample N = 80", Speaker = rep("Native", 40))
sample.80 = rbind(sample.80, data.frame(z = rnorm(40), SampleN = "Sample N = 80", Speaker = rep("Nonnative", 40)))
norm.sampled = rbind(sample.10, sample.30, sample.80)
ggplot() +
geom_line(data = norm.all, mapping = aes(x = z, y = Values), stat = "identity", lwd = 1.2, alpha = 0.5) +
geom_density(data = norm.sampled, aes(x = z, color = Speaker), alpha = 0.5) +
facet_grid(. ~ SampleN) +
labs(title = "Figure 8. A putative case of vocabulary size sampling for native/nonnative speakers",
x = "Standardized (Fake) Vocabulary Size", y = "Density",
caption = "Grey curve = normal distribution (mean = 0; sd = 1)") +
theme_bw()
library(ggplot2)
set.seed(1)
norm = data.frame(Values=dnorm(seq(-3, 3, length=150), 0, 1))
norm$z = seq(-3, 3, length=150)
set.seed(15)
sample.10 = data.frame(z = rnorm(5), SampleN = "Sample N = 10", Speaker = rep("Native", 5))
sample.10 = rbind(sample.10, data.frame(z = rnorm(5), SampleN = "Sample N = 10", Speaker = rep("Nonnative", 5)))
set.seed(15)
sample.30 = data.frame(z = rnorm(15), SampleN = "Sample N = 30", Speaker = rep("Native", 15))
sample.30 = rbind(sample.30, data.frame(z = rnorm(15), SampleN = "Sample N = 30", Speaker = rep("Nonnative", 15)))
set.seed(15)
sample.80 = data.frame(z = rnorm(40), SampleN = "Sample N = 80", Speaker = rep("Native", 40))
sample.80 = rbind(sample.80, data.frame(z = rnorm(40), SampleN = "Sample N = 80", Speaker = rep("Nonnative", 40)))
norm.sampled = rbind(sample.10, sample.30, sample.80)
ggplot() +
geom_line(data = norm.all, mapping = aes(x = z, y = Values), stat = "identity", lwd = 1.2, alpha = 0.5) +
geom_density(data = norm.sampled, aes(x = z, color = Speaker), alpha = 0.5) +
facet_grid(. ~ SampleN) +
labs(title = "Figure 8. A putative case of vocabulary size sampling for native/nonnative speakers",
x = "Standardized (Fake) Vocabulary Size", y = "Density",
caption = "Grey curve = normal distribution (mean = 0; sd = 1)") +
theme_bw()
set.seed(1)
norm = data.frame(Values=dnorm(seq(-3, 3, length=150), 0, 1))
norm$z = seq(-3, 3, length=150)
set.seed(15)
sample.10 = data.frame(z = rnorm(5), SampleN = "Sample N = 10", Speaker = rep("Native", 5))
sample.10 = rbind(sample.10, data.frame(z = rnorm(5), SampleN = "Sample N = 10", Speaker = rep("Nonnative", 5)))
set.seed(15)
sample.30 = data.frame(z = rnorm(15), SampleN = "Sample N = 30", Speaker = rep("Native", 15))
sample.30 = rbind(sample.30, data.frame(z = rnorm(15), SampleN = "Sample N = 30", Speaker = rep("Nonnative", 15)))
set.seed(15)
sample.80 = data.frame(z = rnorm(40), SampleN = "Sample N = 80", Speaker = rep("Native", 40))
sample.80 = rbind(sample.80, data.frame(z = rnorm(40), SampleN = "Sample N = 80", Speaker = rep("Nonnative", 40)))
norm.sampled = rbind(sample.10, sample.30, sample.80)
ggplot() +
geom_line(data = norm, mapping = aes(x = z, y = Values), stat = "identity", lwd = 1.2, alpha = 0.5) +
geom_density(data = norm.sampled, aes(x = z, color = Speaker), alpha = 0.5) +
facet_grid(. ~ SampleN) +
labs(title = "Figure 8. A putative case of vocabulary size sampling for native/nonnative speakers",
x = "Standardized (Fake) Vocabulary Size", y = "Density",
caption = "Grey curve = normal distribution (mean = 0; sd = 1)") +
theme_bw()
# The URL for the resources of these three weeks
resourcesURL = "https://lngproc.fl.nthu.edu.tw/statisticsR/Week5-7/"
# The "clean" data set
Myers.clean = read.csv(paste(resourcesURL, "MyersClean.csv", sep = ""),
fileEncoding = "UTF-8-BOM")
table(Myers.clean$Session)
var.test(x = Myers.clean[Myers.clean$Session == 1,]$logRT,
y = Myers.clean[Myers.clean$Session == 2,]$logRT)
var.test(x = Myers.clean[Myers.clean$Session == 1,]$logRT,
y = Myers.clean[Myers.clean$Session == 2,]$logRT)$p
var.test(x = Myers.clean[Myers.clean$Session == 1,]$logRT,
y = Myers.clean[Myers.clean$Session == 2,]$logRT)$p.value
var(Myers.clean[Myers.clean$Session == 1,]$logRT)
var(Myers.clean[Myers.clean$Session == 2,]$logRT)
s1.rt = Myers.clean[Myers.clean$Session == 1,]$logRT
s2.rt = Myers.clean[Myers.clean$Session == 2,]$logRT
# set "var" to TRUE to assume an equal variance
t.test(x = s1.rt, y = s2.rt, var = TRUE)
setwd("C:/Users/shafe/OneDrive/Documents/Academic Works/NTHU/Courses/Language and Statistics in R/GitHub/Statistics_in_R")
source("https://lngproc.fl.nthu.edu.tw/statisticsR/courseUtil.R")
sl.sim = loadCourseFiles(week = "Week10-11", file = "SaitoLysterSim.csv")
str(sl.sim)
